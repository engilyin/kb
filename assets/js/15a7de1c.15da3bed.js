"use strict";(self.webpackChunkalex_ilin_kb=self.webpackChunkalex_ilin_kb||[]).push([[2600],{9203:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>i});var r=n(4848),o=n(8453);const s={},a="Interceptors",p={id:"Development/Angular/interceptors",title:"Interceptors",description:"Inject JWT token interceptor auth.interceptor.ts",source:"@site/docs/Development/Angular/interceptors.md",sourceDirName:"Development/Angular",slug:"/Development/Angular/interceptors",permalink:"/kb/Development/Angular/interceptors",draft:!1,unlisted:!1,editUrl:"https://github.com/engilyin/kb/docs/Development/Angular/interceptors.md",tags:[],version:"current",lastUpdatedAt:1727544268e3,frontMatter:{},sidebar:"defaultSidebar",previous:{title:"CLI Angular app howto",permalink:"/kb/Development/Angular/cli-angular"},next:{title:"Useful libs",permalink:"/kb/Development/Angular/libraries"}},c={},i=[{value:"Inject JWT token interceptor <code>auth.interceptor.ts</code>",id:"inject-jwt-token-interceptor-authinterceptorts",level:2},{value:"Error interceptor",id:"error-interceptor",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"interceptors",children:"Interceptors"})}),"\n",(0,r.jsxs)(t.h2,{id:"inject-jwt-token-interceptor-authinterceptorts",children:["Inject JWT token interceptor ",(0,r.jsx)(t.code,{children:"auth.interceptor.ts"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-TypeScript",children:"import { HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { HttpEvent } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { AppState } from '@app/store/app.state';\nimport { selectToken } from '@app/store/current-user/current-user.selector';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { first, mergeMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(\n    private readonly store: Store<AppState>\n  ) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.store.select(selectToken).pipe(\n      first(),\n      mergeMap(token => {\n        const headers = new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        });\n        const authReq = !!token ? req.clone({ headers }) : req;\n        return next.handle(authReq);\n      }),\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"Altrnative:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-TypeScript",children:"@Injectable({\n  providedIn: 'root'\n})\nexport class AuthInterceptor implements HttpInterceptor {\n  public static readonly CONTENT_TYPE_HEADER: string = 'Content-Type';\n  public static readonly CONTENT_TYPE_VALUE: string = 'application/json';\n\n  public static readonly AUTHORIZATION_HEADER: string = 'Authorization';\n  public static readonly AUTHORIZATION_VALUE_PREFIX: string = 'Bearer ';\n\n  constructor(\n    private readonly tokenLocalStorageService: TokenLocalStorageService,\n  ) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.tokenLocalStorageService.token$.pipe(\n      first(),\n      mergeMap(token => {\n        const authorizationHeaderValue = `${ AuthInterceptor.AUTHORIZATION_VALUE_PREFIX }${ token }`;\n        let headers = new HttpHeaders({\n          [AuthInterceptor.AUTHORIZATION_HEADER]: authorizationHeaderValue\n        });\n        if (!req.headers || !req.headers.has(AuthInterceptor.CONTENT_TYPE_HEADER)) {\n          headers = headers.append(AuthInterceptor.CONTENT_TYPE_HEADER, AuthInterceptor.CONTENT_TYPE_VALUE);\n        }\n        const authReq = !!token ? req.clone({ headers }) : req;\n        return next.handle(authReq);\n      }),\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-TypeScript",children:"@Injectable({\n  providedIn: 'root'\n})\nexport class RefreshedSessionTokenInterceptor implements HttpInterceptor {\n\n  private static readonly REFRESHED_SESSION_TOKEN_HEADER = 'Refreshed-Session-Token';\n\n  constructor(private readonly tokenLocalStorageService: TokenLocalStorageService) {\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      tap(response => {\n        const httpResponse = response as HttpResponse<any>;\n        const refreshedToken = httpResponse.headers?.get(\n          RefreshedSessionTokenInterceptor.REFRESHED_SESSION_TOKEN_HEADER\n        );\n        const requestToken = this.getTokenFromRequest(request);\n\n        if (refreshedToken && this.tokenLocalStorageService.getToken() === requestToken) {\n          this.tokenLocalStorageService.setToken(refreshedToken);\n        }\n      })\n    );\n  }\n\n  getTokenFromRequest(request: HttpRequest<any>): string | undefined {\n    const authorizationHeader = request.headers?.get(AuthInterceptor.AUTHORIZATION_HEADER);\n\n    return authorizationHeader && authorizationHeader.startsWith(AuthInterceptor.AUTHORIZATION_VALUE_PREFIX)\n      ? authorizationHeader.substr(AuthInterceptor.AUTHORIZATION_VALUE_PREFIX.length)\n      : undefined;\n  }\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"error-interceptor",children:"Error interceptor"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-TypeScript",children:"import {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from \"@angular/router\";\nimport { Injectable } from \"@angular/core\";\nimport * as CurrentUserActions from \"@store/current-user/current-user.actions\";\nimport { Store } from \"@ngrx/store\";\nimport { AppState } from \"@store/app.state\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpErrorInterceptor implements HttpInterceptor {\n\n  constructor(private readonly router: Router,\n              private readonly store: Store<AppState>) {\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request)\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n\n          if (error.status === 401 || error.status === 403) {\n            this.store.dispatch(\n              CurrentUserActions.logOut()\n            );\n            this.router.navigate(['/login']);\n          }\n          return throwError(error.message);\n        })\n      )\n  }\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>p});var r=n(6540);const o={},s=r.createContext(o);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function p(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);