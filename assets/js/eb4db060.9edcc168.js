"use strict";(self.webpackChunkalex_ilin_kb=self.webpackChunkalex_ilin_kb||[]).push([[6246],{3431:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"Development/Angular/reactive-forms","title":"Reactive forms","description":"Installing","source":"@site/docs/Development/Angular/reactive-forms.md","sourceDirName":"Development/Angular","slug":"/Development/Angular/reactive-forms","permalink":"/kb/Development/Angular/reactive-forms","draft":false,"unlisted":false,"editUrl":"https://github.com/engilyin/kb/docs/Development/Angular/reactive-forms.md","tags":[],"version":"current","lastUpdatedAt":1727544268000,"frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Useful libs","permalink":"/kb/Development/Angular/libraries"},"next":{"title":"Angular Routing","permalink":"/kb/Development/Angular/routing"}}');var r=t(4848),o=t(8453);const i={},s="Reactive forms",l={},d=[{value:"Installing",id:"installing",level:2},{value:"Overview",id:"overview",level:2},{value:"Datepickers",id:"datepickers",level:2},{value:"Simple Reactive Datapicker",id:"simple-reactive-datapicker",level:3},{value:"Range Datapicker",id:"range-datapicker",level:3},{value:"Checkbox list",id:"checkbox-list",level:2},{value:"Useful TypeScripts",id:"useful-typescripts",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"reactive-forms",children:"Reactive forms"})}),"\n",(0,r.jsx)(e.h2,{id:"installing",children:"Installing"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.code,{children:"npm i @angular/forms"})}),"\n",(0,r.jsxs)(e.p,{children:["Make sure your current module is importing ",(0,r.jsx)(e.code,{children:"ReactiveFormsModule"})]}),"\n",(0,r.jsx)(e.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(e.p,{children:["Add the ",(0,r.jsx)(e.code,{children:"formBuilder"})," injection:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"constructor(private formBuilder: FormBuilder,\n    private store: Store<AppState>,\n    private cd: ChangeDetectorRef) {}\n    \n    \n    currentModel(): Observable<MyModel> {\n    return this.store.select(selectCurrentModel).pipe(\n      take(1),\n      filter(md => md.id == ModelType),\n      map(md => md.name!));\n  }  \n    \n  ngAfterViewInit(): void {\n    this.currentModel().subscribe(item => this.searchForm.setValue(item));\n  }\n  \n  onFormSubmit(): void {\n    if (this.myForm.valid) {\n      this.store.dispatch(someAction(prepareModel(this.searchForm.value)));\n    } else {\n      console.log(`The Form is not valid: ${JSON.stringify(this.myForm.value)}`);\n    }\n  }\n\n"})}),"\n",(0,r.jsx)(e.p,{children:"and you can extract out the form model definition into the separate file:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-TypeScript",children:"export const searchFormModel = (formBuilder: FormBuilder) => formBuilder.group({\n\n  id: new FormControl('Default', Validators.required),\n\n  name: '',\n\n\n  myTimeframe: formBuilder.group({\n\n    rangeKind: new FormControl('CUSTOM', Validators.required),\n\n    timeframe: '',\n\n    from: '',\n\n    to: '',\n  }),\n\n  dateFrom: '',\n\n  dateTo: '',\n\n  note: '',\n\n\n});\n"})}),"\n",(0,r.jsx)(e.p,{children:"html template:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'  <form [formGroup]="searchForm" (ngSubmit)="onFormSubmit()">\n  \n    <my-select formControlName="period"\n                         *ngIf="searchForm.value.myTimeframe.rangeKind == \'CUSTOM\'"\n                         id="someId"\n                         [options]="customValues()">\n                         \n                         \n    <div class="col" formGroupName="myTimeframe">\n\n\n'})}),"\n",(0,r.jsx)(e.p,{children:"Custom widgets:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<fieldset>\n  <legend>{{label}}:</legend>\n  <div class="custom-control-inline" role="radiogroup">\n    <label *ngFor="let item of model | keyvalue" class="custom-control custom-radio">\n      <input #radio\n             [attr.id]="id + item.key"\n             [value]="item.key"\n             [attr.aria-labelledby]="id + \'LabelFor\' + item.key"\n             class="custom-control-input radio-default ng-untouched ng-pristine ng-valid"\n             tabindex="0"\n             type="radio"\n             (click)="onClickRadio($event)">\n      <span class="custom-control-indicator"></span>\n      <span class="custom-control-description" [attr.id]="id + \'LabelFor\' + item.key">{{item.value}}</span>\n    </label>\n  </div>\n  <ng-content></ng-content>\n</fieldset>\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-TypeScript",children:"import { AfterViewInit, Component, ElementRef, forwardRef, Input, OnInit, ViewChildren, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'my-radio-values',\n  templateUrl: './radio-values.component.html',\n  styleUrls: ['./radio-values.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => RadioValuesComponent),\n      multi: true\n    }\n  ]\n})\nexport class RadioValuesComponent implements ControlValueAccessor, AfterViewInit  {\n\n  @Input() id = '';\n  @Input() label: string = \"\";\n  @Input() model: any = {};\n  @Input() isDisabled = false;\n\n  @ViewChildren(\"radio\")\n  private radioItems?: ElementRef[];\n\n  constructor() { }\n\n  private val: any = '';\n\n  get value(): any {\n    return this.val;\n  }\n\n  set value(v: any) {\n    if (v !== this.val) {\n      this.writeValue(v);\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.updateUi(this.val);\n  }\n\n  updateUi(v: any) {\n    this.radioItems?.forEach((ch: ElementRef) => {ch.nativeElement.checked = (ch.nativeElement.value == this.val)});\n  }\n\n  writeValue(v: any): void {\n\n    this.val = v;\n\n    this.updateUi(v);\n\n    this.onChange(v);\n    this.onTouched();\n  }\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n\n  onChange = (_: any) => {\n  };\n\n  onTouched = () => {\n  };\n\n  onClickRadio(event: Event) {\n    const currentCode = (<HTMLInputElement>event.target).value;\n    if(this.val != currentCode) {\n      this.writeValue(currentCode);\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"datepickers",children:"Datepickers"}),"\n",(0,r.jsx)(e.h3,{id:"simple-reactive-datapicker",children:"Simple Reactive Datapicker"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<div class="form-group">\n  <label [for]="id">{{ labelText }}</label>\n  <div style="width: 180px;">\n    <div class="input-group">\n      <input\n        type="text"\n        #datePicker\n        #ngbDatepicker="ngbDatepicker"\n        ngbDatepicker\n        [id]="id"\n        [name]="name"\n        class="form-control calendar-input"\n        [class.is-invalid]="hasErrors"\n        placeholder="mm/dd/yyyy"\n        [disabled]="disabled"\n        [firstDayOfWeek]=firstDayOfWeek\n        [displayMonths]=displayMonths\n        [navigation]=navigation\n        [showWeekNumbers]=showWeekNumbers\n        [outsideDays]=outsideDays\n        [autoClose]=autoClose\n        [value]="date"\n        (dateSelect)="this.updateValue(datePicker.value)"\n        (change)="this.updateValue(datePicker.value)"\n        (input)="this.updateValue(datePicker.value)"\n        (blur)="markAsTouched()"\n      />\n      <div class="input-group-append">\n        <button class="btn btn-secondary btn-icon-only"\n                type="button"\n                [disabled]="disabled"\n                (click)="ngbDatepicker.toggle()">\n          <span class="fa fa-calendar">\n            <span class="sr-only">Calendar Icon</span>\n          </span>\n        </button>\n      </div>\n      <div class="invalid-feedback"> Invalid value.</div>\n    </div>\n  </div>\n</div>\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-TypeScript",children:"import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { NgbDateParserFormatter } from \"@ng-bootstrap/ng-bootstrap\";\nimport { DateParserFormatter } from \"@components/widgets/datepicker/date-parser.formatter\";\nimport * as moment from 'moment';\n\n@Component({\n  selector: 'my-datepicker',\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: './datepicker.component.html',\n  styleUrls: ['./datepicker.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: DatepickerComponent,\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: DatepickerComponent,\n      multi: true,\n    },\n    {\n      provide: NgbDateParserFormatter,\n      useClass: DateParserFormatter,\n    }\n  ],\n})\nexport class DatepickerComponent implements ControlValueAccessor {\n\n  @Input() id = '';\n  @Input() name = '';\n  @Input() date = '';\n  @Input() labelText = '';\n  @Input() firstDayOfWeek = 0;\n  @Input() displayMonths = 1;\n  @Input() navigation: 'select' | 'arrows' | 'none' = 'select';\n  @Input() showWeekNumbers = false;\n  @Input() outsideDays: 'visible' | 'collapsed' | 'hidden' = 'visible';\n  @Input() autoClose = true;\n  @Input() disabled = false;\n\n  hasErrors = false;\n  touched = false;\n\n  onChange: any = () => {\n  };\n  onTouched: any = () => {\n  };\n\n  updateValue(val: any) {\n    this.date = val;\n    this.onChange(val);\n    this.markAsTouched();\n  }\n\n  registerOnChange(onChange: any) {\n    this.onChange = onChange;\n  }\n\n  registerOnTouched(onTouched: any) {\n    this.onTouched = onTouched;\n  }\n\n  markAsTouched() {\n    this.onTouched();\n    this.touched = true;\n    this.onChange(this.date);\n  }\n\n  writeValue(value: any) {\n    if (value) {\n      this.date = value;\n    }\n  }\n\n  setDisabledState(disabled: boolean) {\n    this.disabled = disabled;\n  }\n\n  validate(formControl: FormControl) {\n    if(formControl.value == '') {\n      return true;\n    }\n    this.hasErrors = formControl.touched && !!formControl.errors;\n    const date = moment(formControl.value, 'MM/DD/YYYY', true).isValid();\n    return !date && {invalid: true};\n  }\n}\n\n\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-TypeScript",children:"\nimport { Injectable } from \"@angular/core\";\nimport { NgbDateParserFormatter, NgbDateStruct } from \"@ng-bootstrap/ng-bootstrap\";\nimport * as moment from \"moment\";\n\n@Injectable()\nexport class DateParserFormatter extends NgbDateParserFormatter {\n\n  readonly DELIMITER = '/';\n\n  parse(value: string): NgbDateStruct | null {\n    if (value) {\n      let date = value.split(this.DELIMITER);\n      return {\n        month: parseInt(date[0], 10),\n        day: parseInt(date[1], 10),\n        year: parseInt(date[2], 10)\n      };\n    }\n    return null;\n  }\n\n  format(date: NgbDateStruct | null): string {\n    return date ? moment(new Date(date.year, date.month - 1, date.day)).format('MM/DD/YYYY') : '';\n  }\n}\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:".ngb-dp-month-name {\n  background-color: #7a7a7a !important;\n}\n\n.invalid-feedback {\n  font-size: 11px;\n  margin-top: 0;\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"range-datapicker",children:"Range Datapicker"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<div class="inline">\n  <div class="form-group hidden">\n    <div class="input-group">\n      <input name="datepicker"\n             class="form-control"\n             ngbDatepicker\n             #datepicker="ngbDatepicker"\n             [autoClose]="\'outside\'"\n             (dateSelect)="onDateSelection($event)"\n             [displayMonths]="2"\n             [dayTemplate]="t"\n             outsideDays="hidden"\n             [startDate]="fromDate!"\n             tabindex="-1">\n      <ng-template #t let-date let-focused="focused">\n        <span class="custom-day"\n              [class.focused]="focused"\n              [class.range]="isRange(date)"\n              [class.faded]="isHovered(date) || isInside(date)"\n              (mouseenter)="hoveredDate = date"\n              (mouseleave)="hoveredDate = null">\n          {{ date.day }}\n        </span>\n      </ng-template>\n    </div>\n  </div>\n  <div class="form-group">\n    <div class="input-group">\n      <input #dpFromDate\n             class="form-control" placeholder="mm/dd/yyyy"\n             name="dpFromDate"\n             [value]="formatter.format(fromDate)"\n             (input)="fromDate = validateInput(fromDate, dpFromDate.value)">\n      <div class="input-group-append">\n        <button class="btn btn-secondary btn-icon-only"\n                type="button"\n                [disabled]="disabled"\n                (click)="datepicker.toggle()">\n          <span class="fa fa-calendar">\n            <span class="sr-only">Calendar Icon</span>\n          </span>\n        </button>\n      </div>\n    </div>\n  </div>\n  <div class="form-group ml-2">\n    <div class="input-group">\n      <input #dpToDate\n             class="form-control" placeholder="mm/dd/yyyy"\n             name="dpToDate"\n             [value]="formatter.format(toDate)"\n             (input)="toDate = validateInput(toDate, dpToDate.value)">\n      <div class="input-group-append">\n        <button class="btn btn-secondary btn-icon-only"\n                type="button"\n                [disabled]="disabled"\n                (click)="datepicker.toggle()">\n          <span class="fa fa-calendar">\n            <span class="sr-only">Calendar Icon</span>\n          </span>\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-TypeScript",children:"import {Component, Input, OnInit} from '@angular/core';\nimport {NgbCalendar, NgbDate, NgbDateParserFormatter} from \"@ng-bootstrap/ng-bootstrap\";\nimport {NG_VALIDATORS, NG_VALUE_ACCESSOR} from \"@angular/forms\";\nimport {DateParserFormatter} from \"@components/widgets/datepicker/date-parser.formatter\";\n\n@Component({\n  selector: 'my-daterangepicker',\n  templateUrl: './daterangepicker.component.html',\n  styleUrls: ['./daterangepicker.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: DaterangepickerComponent,\n      multi: true\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: DaterangepickerComponent,\n      multi: true,\n    },\n    {\n      provide: NgbDateParserFormatter,\n      useClass: DateParserFormatter,\n    }\n  ],\n})\nexport class DaterangepickerComponent implements OnInit {\n\n  hoveredDate: NgbDate | null = null;\n\n  fromDate: NgbDate | null;\n  toDate: NgbDate | null;\n  model: any;\n\n  @Input() id = '';\n  @Input() name = '';\n  @Input() labelText = '';\n  @Input() disabled = false;\n\n  constructor(private calendar: NgbCalendar, public formatter: NgbDateParserFormatter) {\n    this.fromDate = calendar.getToday();\n    this.toDate = calendar.getNext(calendar.getToday(), 'd', 10);\n  }\n\n  ngOnInit(): void {\n  }\n\n  cancelDateSelection() {\n    if (this.fromDate) {\n      this.toDate = null;\n    } else {\n      this.fromDate = null;\n    }\n  }\n\n  onDateSelection(date: NgbDate) {\n    if (!this.fromDate && !this.toDate) {\n      this.fromDate = date;\n    } else if (this.fromDate && !this.toDate && date && date.after(this.fromDate)) {\n      this.toDate = date;\n    } else {\n      this.toDate = null;\n      this.fromDate = date;\n    }\n  }\n\n  isHovered(date: NgbDate) {\n    return this.fromDate && !this.toDate && this.hoveredDate && date.after(this.fromDate) && date.before(this.hoveredDate);\n  }\n\n  isInside(date: NgbDate) {\n    return this.toDate && date.after(this.fromDate) && date.before(this.toDate);\n  }\n\n  isRange(date: NgbDate) {\n    return date.equals(this.fromDate) || (this.toDate && date.equals(this.toDate)) || this.isInside(date) || this.isHovered(date);\n  }\n\n  validateInput(currentValue: NgbDate | null, input: string): NgbDate | null {\n    const parsed = this.formatter.parse(input);\n    return parsed && this.calendar.isValid(NgbDate.from(parsed)) ? NgbDate.from(parsed) : currentValue;\n  }\n}\n\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-css",children:".inline {\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center;\n}\n\n.inline .form-group {\n  flex: 0 0 auto;\n  flex-flow: row wrap;\n}\n\n.form-group.hidden,\n.form-group.hidden .input-group,\n.form-group.hidden .input-group .form-control{\n  width: 0;\n  margin: 0;\n  border: none;\n  padding: 0;\n}\n.custom-day {\n  text-align: center;\n  padding: 0.185rem 0.25rem;\n  display: inline-block;\n  height: 2rem;\n  width: 2rem;\n}\n\n"})}),"\n",(0,r.jsx)(e.h2,{id:"checkbox-list",children:"Checkbox list"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<fieldset class="checkbox-group">\n  <legend>{{label}}</legend>\n  <div class="checkbox-list">\n    <label *ngFor="let item of model" class="custom-checkbox custom-control">\n      <input #checkbox [attr.id]="id + \'itemInput\' + item.code"\n              [value]="item.code"\n              [checked]="isChecked(item.code)"\n              type="checkbox"\n              tabindex="0"\n              class="checkbox-default custom-control-input"\n              [attr.aria-labelledby]="id + \'itemLabel\' + item.code"\n              (click)="onCheckboxClick($event)">\n      <span class="custom-control-indicator"></span>\n      <span class="custom-control-description" [attr.id]="id + \'itemLabel\' + item.code">{{item.label}}</span>\n    </label>\n  </div>\n</fieldset>\n\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-TypeScript",children:"import { Component, ElementRef, forwardRef, Input, ViewChildren, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CheckboxItem } from './checkbox-list.const';\n\n@Component({\n  selector: 'my-checkbox-list',\n  templateUrl: './checkbox-list.component.html',\n  styleUrls: ['./checkbox-list.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => CheckboxListComponent),\n      multi: true\n    }\n  ]\n})\nexport class CheckboxListComponent implements ControlValueAccessor {\n\n  @Input() id = '';\n  @Input() name = '';\n  @Input() label: string = \"\";\n  @Input() model: CheckboxItem[] | null = null;\n  @Input() isDisabled = false;\n\n  readonly ALL = 'ALL';\n\n  @ViewChildren(\"checkbox\")\n  private checkboxes?: Array<ElementRef<HTMLInputElement>>;\n\n  constructor() { }\n\n  private val: any = '';\n  private checkedCodes = new Set();\n\n  get value(): any {\n    return this.val;\n  }\n\n  set value(v: any) {\n    if (v !== this.val) {\n      this.writeValue(v);\n    }\n  }\n\n  isChecked(code: string): boolean {\n    return this.checkedCodes.has(code);\n  }\n\n  updateUi(v: any) {\n    this.checkboxes?.forEach((ch: ElementRef) => {ch.nativeElement.checked = this.checkedCodes.has(ch.nativeElement.value)});\n  }\n\n  writeValue(v: any): void {\n\n    this.val = v;\n    this.checkedCodes = this.valueAsSet(v);\n\n    this.updateUi(v);\n\n    this.onChange(v);\n    this.onTouched();\n  }\n\n  registerOnChange(fn: (_: any) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n\n  onChange = (_: any) => {\n  };\n\n  onTouched = () => {\n  };\n\n  valueAsSet(v: any): Set<any> {\n    return (!v || v.trim().length == 0) ? new Set(): new Set(v.split(','));\n  }\n\n  onCheckboxClick(event: Event) {\n    const checked = (<HTMLInputElement> event.target).checked;\n    const currentCode = (<HTMLInputElement> event.target).value;\n\n    if (currentCode === this.ALL) {\n      this.checkboxes?.forEach(x => {\n        if (x.nativeElement.value !== this.ALL) {\n          x.nativeElement.disabled = checked;\n        }\n      });\n      this.checkedCodes.clear();\n    }\n\n    if (checked) {\n      this.checkedCodes.add(currentCode);\n    } else {\n      this.checkedCodes.delete(currentCode);\n    }\n\n    this.val = Array.from(this.checkedCodes).join(',');\n    this.onChange(this.val);\n    this.onTouched();\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.isDisabled = isDisabled;\n  }\n\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"useful-typescripts",children:"Useful TypeScripts"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-TypeScript",children:"    violationNames: this.formBuilder.group(Object.fromEntries(VIOLATION_NAMES.map(item => [item.checkValue,  new FormControl(false)]))),\n"})}),"\n",(0,r.jsx)(e.p,{children:"If you like to use object as a Map"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-TypeScript",children:"export const detailsNav: {[key:string]: string} = {\n  someKey1: 'ok there',\n  another: 'Big value for something',\n  onemore: 'Val'\n}\n"})})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>s});var a=t(6540);const r={},o=a.createContext(r);function i(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);