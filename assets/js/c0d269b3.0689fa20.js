"use strict";(self.webpackChunkalex_ilin_kb=self.webpackChunkalex_ilin_kb||[]).push([[758],{394:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Job/TechInterview/Java/design/design-patterns","title":"design-patterns","description":"Design Patterns","source":"@site/docs/Job/TechInterview/Java/design/design-patterns.md","sourceDirName":"Job/TechInterview/Java/design","slug":"/Job/TechInterview/Java/design/design-patterns","permalink":"/kb/Job/TechInterview/Java/design/design-patterns","draft":false,"unlisted":false,"editUrl":"https://github.com/engilyin/kb/docs/Job/TechInterview/Java/design/design-patterns.md","tags":[],"version":"current","lastUpdatedAt":1727972934000,"frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"approach","permalink":"/kb/Job/TechInterview/Java/design/approach"},"next":{"title":"effective-java","permalink":"/kb/Job/TechInterview/Java/design/effective-java"}}');var r=t(4848),a=t(8453);const s={},l=void 0,o={},c=[{value:"Design Patterns",id:"design-patterns",level:2},{value:"Resources",id:"resources",level:3},{value:"Creational",id:"creational",level:3},{value:"Behavioral",id:"behavioral",level:3},{value:"Structural",id:"structural",level:3}];function d(e){const n={a:"a",h2:"h2",h3:"h3",li:"li",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"design-patterns",children:"Design Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"resources",children:"Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/kamranahmedse/design-patterns-for-humans",children:"Design patterns explained too simply"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns-in-javas-core-libraries/2707195#2707195",children:"Examples of design patterns in Java libraries"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"creational",children:"Creational"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Singleton -  Single instance of class. Either Eager (static) or Lazy (broken pre-JDK5). Eg: Logger, Configurer"}),"\n",(0,r.jsx)(n.li,{children:"Factory - Create types of instances. Eg: Trade type (Bonds, Bill, Notes)"}),"\n",(0,r.jsx)(n.li,{children:"Abstract Factory - Factory of factories of related products. Eg: Trade Type (GermanBond, EuroBond, GermanBill, EuroBill)"}),"\n",(0,r.jsx)(n.li,{children:"Builder - Eg: StringBuilder, PizzaMaker"}),"\n",(0,r.jsx)(n.li,{children:"Prototype - Copying costly-creation objects. Classes should implement clone or similar method."}),"\n",(0,r.jsx)(n.li,{children:"Object pool - Re-use instances. Eg: Threadpool"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"behavioral",children:"Behavioral"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Observer - Reactive streams."}),"\n",(0,r.jsx)(n.li,{children:"Strategy - Encapsulate algorithms and execute either. Eg: Trading strategy, select one and execute."}),"\n",(0,r.jsx)(n.li,{children:"Command - Object encapsulates action with common interface which executor calls. Eg: Remote click."}),"\n",(0,r.jsx)(n.li,{children:"State - Behavior based on current state of object."}),"\n",(0,r.jsx)(n.li,{children:"Visitor - Object which visits all similar instances. Eg: File Traverse, or Calculate total bill from cart."}),"\n",(0,r.jsx)(n.li,{children:"Iterator - Iterating through a collection of objects."}),"\n",(0,r.jsx)(n.li,{children:"Chain of Responsibility - object passes through various instances, coordinated by Handler. Eg: Stream API"}),"\n",(0,r.jsx)(n.li,{children:"Template - Eg: HTML templates"}),"\n",(0,r.jsx)(n.li,{children:"Interpreter - Format converter. Eg: JVM converts byte to native for JVM."}),"\n",(0,r.jsx)(n.li,{children:"Memento - Save and restore state of object."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"structural",children:"Structural"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Adapter - Adapting to a non-direct-compatible class/module/system."}),"\n",(0,r.jsx)(n.li,{children:"Decorator - Wrap class with another Eg: FileReader, BufferedReader"}),"\n",(0,r.jsx)(n.li,{children:"Facade - Hiding complexity behind simple interfaces. Eg: Turbo Tax"}),"\n",(0,r.jsx)(n.li,{children:"Proxy - Eg: Hibernate proxy for lazy fetch. @Spy instances for JUnit/Mockito."}),"\n",(0,r.jsx)(n.li,{children:"Flyweight - Store common characteristics of multiple objects in single place. Eg: Glyph for all characters in a document."}),"\n",(0,r.jsx)(n.li,{children:"Bridge - Decouple abstraction from implementation so that both can vary independently. Bridge pattern is often created using Adapter pattern."}),"\n",(0,r.jsx)(n.li,{children:"Composite - Eg: Folder and files"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(6540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);