"use strict";(self.webpackChunkalex_ilin_kb=self.webpackChunkalex_ilin_kb||[]).push([[9720],{7119:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>a});var t=i(4848),s=i(8453);const l={},o=void 0,r={id:"Job/TechInterview/Java/design/solid",title:"solid",description:"SOLID principles",source:"@site/docs/Job/TechInterview/Java/design/solid.md",sourceDirName:"Job/TechInterview/Java/design",slug:"/Job/TechInterview/Java/design/solid",permalink:"/kb/Job/TechInterview/Java/design/solid",draft:!1,unlisted:!1,editUrl:"https://github.com/engilyin/kb/docs/Job/TechInterview/Java/design/solid.md",tags:[],version:"current",lastUpdatedAt:1727972934e3,frontMatter:{},sidebar:"defaultSidebar",previous:{title:"effective-java",permalink:"/kb/Job/TechInterview/Java/design/effective-java"},next:{title:"testing",permalink:"/kb/Job/TechInterview/Java/design/testing"}},c={},a=[{value:"SOLID principles",id:"solid-principles",level:2},{value:"Other design principles",id:"other-design-principles",level:2}];function d(e){const n={h2:"h2",li:"li",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"solid-principles",children:"SOLID principles"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"S = Single Responsibility - Each class/instance should have only 1 responsibility"}),"\n",(0,t.jsx)(n.li,{children:"O = Open Closed - Objects should be open for extension closed for modification"}),"\n",(0,t.jsx)(n.li,{children:"L = Liskov substitution - Instance objects can be replaced with subtypes without altering correctness"}),"\n",(0,t.jsx)(n.li,{children:"I = Interface Segregation - Multiple specific interfaces are better than big general one"}),"\n",(0,t.jsx)(n.li,{children:"D = Dependency Injection - High level and Low level modules should both depend on abstraction"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"other-design-principles",children:"Other design principles"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Code to interface not implementation"}),"\n",(0,t.jsx)(n.li,{children:"Favor composition over inheritance"}),"\n",(0,t.jsx)(n.li,{children:"Encapsulate what changes"}),"\n",(0,t.jsx)(n.li,{children:"Strive for loose coupling between objects"}),"\n",(0,t.jsx)(n.li,{children:"Principle of least knowledge = Talk only to immediate friends"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var t=i(6540);const s={},l=t.createContext(s);function o(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);