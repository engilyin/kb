"use strict";(self.webpackChunkalex_ilin_kb=self.webpackChunkalex_ilin_kb||[]).push([[6750],{3151:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"DevOps/cicd","title":"CI/CD","description":"Rules","source":"@site/docs/DevOps/cicd.md","sourceDirName":"DevOps","slug":"/DevOps/cicd","permalink":"/kb/DevOps/cicd","draft":false,"unlisted":false,"editUrl":"https://github.com/engilyin/kb/docs/DevOps/cicd.md","tags":[],"version":"current","lastUpdatedAt":1727544268000,"frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Ansible","permalink":"/kb/DevOps/ansible"},"next":{"title":"Jenkins","permalink":"/kb/DevOps/jenkins"}}');var t=s(4848),i=s(8453);const o={},l="CI/CD",c={},d=[{value:"Rules",id:"rules",level:2},{value:"Basis",id:"basis",level:2}];function a(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"cicd",children:"CI/CD"})}),"\n",(0,t.jsx)(n.h2,{id:"rules",children:"Rules"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"main"})," branch HEAD must corespond to the latest release artifact"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"develop"})," branch must contain ALL commits existed in the ",(0,t.jsx)(n.code,{children:"main"})," plus new completed features"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["All changes into ",(0,t.jsx)(n.code,{children:"develop"})," branch should be done through the approved Pull Request.\r\nEvery new merge generates the new SNAPSHOT artifact which is automatically deployed onto the ",(0,t.jsx)(n.code,{children:"DEV"})," environment"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["All changes into ",(0,t.jsx)(n.code,{children:"main"})," except HOTFIXES are done through the PR merge from ",(0,t.jsx)(n.code,{children:"develop"})," branch.\r\nEvery new merge generates the new RELEASE artifact and increnent the build version. This release\r\nartifact automatically deployed onto the ",(0,t.jsx)(n.code,{children:"QA"})," environment and sequentionaly one by one onto the higher environments.\r\nIt could be stopped on every step in case of any issues (found bugs etc) on lower environment"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Every developor is responsible to make sure before the merge ",(0,t.jsx)(n.code,{children:"feature branch"})," to ",(0,t.jsx)(n.code,{children:"develop"})," that:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"the progect can be successfully built"}),"\n",(0,t.jsx)(n.li,{children:"all unit tests are passed"}),"\n",(0,t.jsx)(n.li,{children:"all integrations tests (if any) are passed"}),"\n",(0,t.jsx)(n.li,{children:"If required: Veracode scan is passed"}),"\n",(0,t.jsx)(n.li,{children:"new feature has enough unit and integration tests"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["All feature branches are created from HEAD of ",(0,t.jsx)(n.code,{children:"develop"})," branch."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["In case of urgent changes request it could be done through the HOTFIX approach.\r\nUnlike feature branches the ",(0,t.jsx)(n.code,{children:"hotfix"})," branch is created from HEAD of ",(0,t.jsx)(n.code,{children:"main"}),".\r\nThis is the only branch that should fork directly off of ",(0,t.jsx)(n.code,{children:"main"}),". As soon as the fix is complete,\r\nit MUST be merged into BOTH ",(0,t.jsx)(n.code,{children:"main"})," and ",(0,t.jsx)(n.code,{children:"develop"})," (or the current release branch), and `main`` should be\r\ntagged with an updated version number.",(0,t.jsx)(n.br,{}),"\n","This process should be done through the special Jenkins Job"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"basis",children:"Basis"}),"\n",(0,t.jsx)(n.p,{children:"12factors"}),"\n",(0,t.jsx)(n.p,{children:"X. Dev/prod parity"}),"\n",(0,t.jsx)(n.p,{children:"The time gap: A developer may work on code that takes days, weeks, or even months to go into production.\r\nMake the time gap small: a developer may write code and have it deployed hours or even just minutes later."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var r=s(6540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);