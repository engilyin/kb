"use strict";(self.webpackChunkalex_ilin_kb=self.webpackChunkalex_ilin_kb||[]).push([[9613],{8215:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var i=t(4848),a=t(8453);const r={},c="Spring",o={id:"Development/Java/Spring/README",title:"Spring",description:"Turn off some autoconfig",source:"@site/docs/Development/Java/Spring/README.md",sourceDirName:"Development/Java/Spring",slug:"/Development/Java/Spring/",permalink:"/kb/Development/Java/Spring/",draft:!1,unlisted:!1,editUrl:"https://github.com/engilyin/kb/docs/Development/Java/Spring/README.md",tags:[],version:"current",lastUpdatedAt:1727544268e3,frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Flutter CLI",permalink:"/kb/Development/Flutter/flutter-cli"},next:{title:"Spring Data",permalink:"/kb/Development/Java/Spring/spring-data"}},s={},l=[{value:"Turn off some autoconfig",id:"turn-off-some-autoconfig",level:2},{value:"Redis and TLS",id:"redis-and-tls",level:2},{value:"Turn off web security",id:"turn-off-web-security",level:2},{value:"Spring Data",id:"spring-data",level:2},{value:"Cache",id:"cache",level:2},{value:"Migration to Spring 6",id:"migration-to-spring-6",level:2},{value:"Security",id:"security",level:3},{value:"Configuration",id:"configuration",level:3}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"spring",children:"Spring"})}),"\n",(0,i.jsx)(n.h2,{id:"turn-off-some-autoconfig",children:"Turn off some autoconfig"}),"\n",(0,i.jsx)(n.p,{children:"We can turn off some autoconfiguation putting it into the test/resources/application.yml\nE.g. Redis"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"spring:\n  profiles: no-redis\n  autoconfigure:\n    exclude:\n      - org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration\n"})}),"\n",(0,i.jsx)(n.h2,{id:"redis-and-tls",children:"Redis and TLS"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    JAVA_OPTS: '-Delastic.apm.service_name=app-name -Djavax.net.debug=all -Djavax.net.ssl.trustStoreType=PKCS12 -Djavax.net.ssl.trustStore=/app/BOOT-INF/classes/my-truststore.p12 -Djavax.net.ssl.trustStorePassword=changeit'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"turn-off-web-security",children:"Turn off web security"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'\n@EnableWebSecurity\n@Configuration\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n        web.ignoring().antMatchers("/**");\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"spring-data",children:"Spring Data"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@Configuration\npublic class MyDatabaseConfig {\n\n    @Bean\n    @ConfigurationProperties("my.datasource")\n    public DataSourceProperties myDataSourceProperties() {\n        return new DataSourceProperties();\n    }\n\n    //looks like that is wrong. We need to inject this bean as parameter instead call directly\n    @Bean(name = "myDatasource")\n    public DataSource myDatasource() {\n        return myDataSourceProperties().initializeDataSourceBuilder().build();\n    }\n}\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"cache",children:"Cache"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'\n@Configuration\n@EnableCaching\n@Slf4j\npublic class CacheConfiguration {\n    public static final String NAE_SESSION = "naeCache";\n\n    @Bean\n    public org.springframework.cache.CacheManager cacheManager() {\n        CacheManager cacheManager = CacheManager.create();\n        log.info("CacheManager was created {}", cacheManager);\n\n        if (!cacheManager.cacheExists(NAE_SESSION)) {\n            cacheManager.addCache(NAE_SESSION);\n            log.info("cache {} was added to the CacheManager", NAE_SESSION);\n        }\n\n        cacheManager.getCache(NAE_SESSION).getCacheEventNotificationService().registerListener(new EhcacheEventListener());\n        log.info("Listener {} was added to a cache", cacheManager.getCache(NAE_SESSION).getCacheEventNotificationService().getCacheEventListeners());\n\n        return new EhCacheCacheManager(cacheManager);\n    }\n\n    static class EhcacheEventListener implements net.sf.ehcache.event.CacheEventListener {\n\n        @Override\n        public void notifyElementRemoved(Ehcache cache, Element element) {\n            NAESessionInterface naeSession = (NAESessionInterface) element.getObjectValue();\n            if (naeSession != null) {\n                naeSession.closeSession();\n                log.debug("Session for element {} was closed before removing", element);\n            }\n            log.info("Expired session for element {} was removed", element);\n        }\n\n        @Override\n        public void notifyElementPut(Ehcache cache, Element element) {\n            log.debug("Added a new NAE session {} into cache ", element);\n        }\n\n        @Override\n        public void notifyElementUpdated(Ehcache cache, Element element) {\n            log.debug("Element {} updated", element);\n        }\n\n        @Override\n        public void notifyElementExpired(Ehcache cache, Element element) {\n            NAESessionInterface naeSession = (NAESessionInterface) element.getObjectValue();\n            if (naeSession != null) {\n                naeSession.closeSession();\n                log.debug("Expired session for element {} was closed", element);\n            }\n            log.info("Session for element {} expired", element);\n        }\n\n        @Override\n        public void notifyElementEvicted(Ehcache cache, Element element) {\n        }\n\n        @Override\n        public void notifyRemoveAll(Ehcache cache) {\n        }\n\n        @Override\n        public Object clone() throws CloneNotSupportedException {\n            return super.clone();\n        }\n\n        @Override\n        public void dispose() {\n\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"migration-to-spring-6",children:"Migration to Spring 6"}),"\n",(0,i.jsx)(n.h3,{id:"security",children:"Security"}),"\n",(0,i.jsx)(n.p,{children:"Replace with beans"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://spring.io/blog/2022/02/21/spring-security-without-the-websecurityconfigureradapter",children:"https://spring.io/blog/2022/02/21/spring-security-without-the-websecurityconfigureradapter"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@Configuration\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n\n        http.csrf()\n                .disable()\n                .authorizeHttpRequests((auth) -> auth.anyRequest().permitAll());\n        return http.build();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.p,{children:"You may need:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"spring:\n  main:\n    allow-circular-references: true\n  config:\n    import: 'optional:configserver:'\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var i=t(6540);const a={},r=i.createContext(a);function c(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);