"use strict";(self.webpackChunkalex_ilin_kb=self.webpackChunkalex_ilin_kb||[]).push([[3308],{7375:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"Development/Angular/security","title":"Angular Security","description":"Guards","source":"@site/docs/Development/Angular/security.md","sourceDirName":"Development/Angular","slug":"/Development/Angular/security","permalink":"/kb/Development/Angular/security","draft":false,"unlisted":false,"editUrl":"https://github.com/engilyin/kb/docs/Development/Angular/security.md","tags":[],"version":"current","lastUpdatedAt":1727544268000,"frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Angular Routing","permalink":"/kb/Development/Angular/routing"},"next":{"title":"Setting up and Managing Angular Project","permalink":"/kb/Development/Angular/setup-angular-project"}}');var o=t(4848),s=t(8453);const a={},i="Angular Security",l={},u=[{value:"Guards",id:"guards",level:2},{value:"Auth guard",id:"auth-guard",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"angular-security",children:"Angular Security"})}),"\n",(0,o.jsx)(n.h2,{id:"guards",children:"Guards"}),"\n",(0,o.jsx)(n.h3,{id:"auth-guard",children:"Auth guard"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"shared/guards/auth.guard.ts"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-TypeScript",children:"import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\nimport {Observable, of} from 'rxjs';\nimport {Store} from '@ngrx/store';\nimport {AppState} from '@store/app.state';\nimport {selectIsLoggedIn} from '@store/current-user/current-user.selector';\nimport {mergeMap} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private readonly store: Store<AppState>,\n    private readonly router: Router\n  ) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> {\n    return this.store.select(selectIsLoggedIn).pipe(\n      mergeMap(isLoggedIn => {\n        if (!isLoggedIn) {\n          this.router.navigate(['/login']);\n        }\n        return of(isLoggedIn);\n      })\n    );\n  }\n\n}\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"Here is the unit test for that:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-TypeScript",children:"import { TestBed } from '@angular/core/testing';\n\nimport { AuthGuard } from './auth.guard';\nimport { MockStore, provideMockStore } from '@ngrx/store/testing';\nimport { MockUserContextService } from '@app/test/mock-usercontext.service';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport { AppState } from '@store/app.state';\nimport { initialGlobalAppStatus } from '@store/global-app-status';\nimport { CurrentUser } from '@store/current-user/current-user.state';\n\ndescribe('AuthGuard', () => {\n  let guard: AuthGuard;\n  let store: MockStore<AppState>;\n  let route: ActivatedRouteSnapshot;\n  let state: RouterStateSnapshot;\n\n  const appServiceMock: MockUserContextService = new MockUserContextService();\n\n  function setupTestingModuleWithCurrentUserInState(currentUser: CurrentUser): void {\n    const initialState: AppState = {\n      globalAppStatus: initialGlobalAppStatus,\n      currentUser,\n      currentAccount: appServiceMock.getCurrentAccount()\n    };\n    TestBed.configureTestingModule({\n      imports: [\n        // any modules needed\n      ],\n      providers: [\n        AuthGuard,\n        provideMockStore({ initialState }),\n        { provide: Router, useValue: jasmine.createSpyObj('router', ['navigate']) },\n        {\n          provide: ActivatedRouteSnapshot,\n          useValue: jasmine\n            .createSpyObj([\n              'root',\n              'parent',\n              'firstChild',\n              'children',\n              'pathFromRoot',\n              'paramMap',\n              'queryParamMap',\n              'toString'\n            ])\n        },\n        {\n          provide: RouterStateSnapshot,\n          useValue: jasmine\n            .createSpyObj([\n              'toString'\n            ])\n        }\n        // other providers\n      ],\n    });\n    guard = TestBed.inject(AuthGuard);\n    store = TestBed.inject(MockStore);\n    route = TestBed.inject(ActivatedRouteSnapshot);\n    state = TestBed.inject(RouterStateSnapshot);\n  }\n\n  it('should be created', () => {\n    const currentUser = appServiceMock.getUserWithoutToken();\n    setupTestingModuleWithCurrentUserInState(currentUser);\n    expect(guard).toBeTruthy();\n  });\n\n  it('should return false if the current-user state is NOT logged in', () => {\n    //const expected = cold('(a|)', { a: false });\n    const currentUser = appServiceMock.getUserWithoutToken();\n    setupTestingModuleWithCurrentUserInState(currentUser);\n    guard.canActivate(route, state)\n      .subscribe(data => {\n        expect(data).toBeFalsy();\n      });\n  });\n\n  it('should return true if the current-user state is logged in', () => {\n    //const expected = cold('(a|)', { a: true });\n    const currentUser = appServiceMock.getUserWithToken();\n    setupTestingModuleWithCurrentUserInState(currentUser);\n    guard.canActivate(route, state)\n      .subscribe(data => {\n        expect(data).toBeTruthy();\n      });\n  });\n});\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"Session management:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-TypeScript",children:"\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthSessionService {\n\n  readonly isLoggedIn$: Observable<boolean>;\n\n  private userInfoRequestSent = false;\n\n  constructor(\n    private readonly tokenLocalStorageService: TokenLocalStorageService,\n    private readonly store: Store<AppState>,\n  ) {\n    this.isLoggedIn$ = this.tokenLocalStorageService.token$.pipe(map(token => !!token));\n  }\n\n  subscribeOnLoggedInChange(): void {\n    this.isLoggedIn$.subscribe(isLoggedIn => {\n      if (isLoggedIn && !this.userInfoRequestSent) {\n        this.userInfoRequestSent = true;\n        this.store.dispatch(getCurrentUser());\n      }\n      if (!isLoggedIn) {\n        this.userInfoRequestSent = false;\n      }\n    })\n  }\n}\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"Get  current user info from the backend:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-TypeScript",children:"@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private readonly httpClient: HttpClient) {\n  }\n\n  getCurrentUser(): Observable<AuthenticatedUser> {\n    return this.httpClient.get<AuthenticatedUser>(`${environment.baseUrl}/api/user/profile`);\n  }\n  \n}\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"Smaple Login screen"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'\n <form\n        [formGroup]="loginForm"\n        (ngSubmit)="logIn()"\n        autocomplete="off"\n        novalidate>\n        <div class="row no-gutters pl-3">\n          <div class="order-last order-md-first col-sm-12 col-md-5 d-flex flex-column">\n            <div class="form-group">\n              <label class="text-white" for="userNameText">User Name</label>\n              <input formControlName="userName" type="text"\n                     id="userNameText"\n                     class="form-control login-input-icon"\n                     placeholder="User Name"\n                     autocomplete="off"\n                     [maxLength]="validationRules.usernameMaxLength">\n            </div>\n            <div class="form-group">\n              <label class="text-white d-flex" for="passwordText">Password\n                <a routerLink="/forgot-password" class="text-white font-light ml-auto" tabindex="999">Forgot Your\n                  Password?</a>\n              </label>\n              <input formControlName="password" type="password"\n                     id="passwordText"\n                     class="form-control login-input-icon"\n                     placeholder="Password"\n                     autocomplete="off">\n            </div>\n\n            <div role="alert" class="alert alert-danger" *ngIf="loginErrorMessage$ | async">\n              Your <b>Username</b> and/or <b>Password</b> do not match our records.\n              Error: {{loginErrorMessage$ | async}}\n            </div>\n\n            <button class="btn btn-primary btn-block my-4 text-uppercase" [disabled]="loginForm.invalid">Sign In\n            </button>\n\n          </div>\n        </div>\n      </form>\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"login.component.ts"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-TypeScript",children:"\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoginComponent implements OnInit {\n  readonly validationRules = VALIDATION_RULES;\n\n  usernameControl?: FormControl;\n  passwordControl?: FormControl;\n  \n    loginForm = this.fb.group({\n    userName: [null, [Validators.required]],\n    password: [null, [Validators.required]],\n  });\n\n  loginErrorMessage$?: Observable<string>;\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly store: Store<AppState>,\n  ) {\n  }\n  \n  ngOnInit() {\n    this.createForm();\n    this.loginErrorMessage$ = this.store.pipe(select(selectAuthError));\n  }\n\n  logIn(): void {\n    if (this.loginForm!.valid) {\n      this.store.dispatch(CurrentUserActions.logIn({\n        credentials: {\n          ...this.loginForm.value\n        }\n      }));\n    }\n  }\n\n  private createForm(): void {\n    this.usernameControl = this.loginForm.get('userName') as FormControl;\n    this.passwordControl = this.loginForm.get('password') as FormControl;\n  }\n\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(6540);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);