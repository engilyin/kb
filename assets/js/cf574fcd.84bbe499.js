"use strict";(self.webpackChunkalex_ilin_kb=self.webpackChunkalex_ilin_kb||[]).push([[591],{1154:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"Development/Angular/state-management","title":"Angular State management","description":"Common stuff","source":"@site/docs/Development/Angular/state-management.md","sourceDirName":"Development/Angular","slug":"/Development/Angular/state-management","permalink":"/kb/Development/Angular/state-management","draft":false,"unlisted":false,"editUrl":"https://github.com/engilyin/kb/docs/Development/Angular/state-management.md","tags":[],"version":"current","lastUpdatedAt":1727544268000,"frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Setting up and Managing Angular Project","permalink":"/kb/Development/Angular/setup-angular-project"},"next":{"title":"Angular Testing","permalink":"/kb/Development/Angular/testing"}}');var a=t(4848),s=t(8453);const o={},c="Angular State management",i={},l=[{value:"Common stuff",id:"common-stuff",level:2},{value:"Main store module",id:"main-store-module",level:3},{value:"App State",id:"app-state",level:3},{value:"Persist state",id:"persist-state",level:3},{value:"Metadata",id:"metadata",level:3},{value:"Module",id:"module",level:2},{value:"Consts [Optionally]",id:"consts-optionally",level:2},{value:"State itself",id:"state-itself",level:2},{value:"Actions",id:"actions",level:2},{value:"Reducer",id:"reducer",level:2},{value:"Effects [Optionally]",id:"effects-optionally",level:2},{value:"Basic effect",id:"basic-effect",level:3},{value:"Routing effect on status change",id:"routing-effect-on-status-change",level:3},{value:"Using service and promise.",id:"using-service-and-promise",level:3},{value:"Selectors [Optionally]",id:"selectors-optionally",level:2},{value:"Consume the state",id:"consume-the-state",level:2}];function u(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"angular-state-management",children:"Angular State management"})}),"\n",(0,a.jsx)(r.h2,{id:"common-stuff",children:"Common stuff"}),"\n",(0,a.jsx)(r.h3,{id:"main-store-module",children:"Main store module"}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.code,{children:"root-store.module.ts"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-TypeScript",children:"import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MetaReducer, StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { GlobalAppStatusStoreModule } from './global-app-status/global-app-status.module';\nimport { CurrentUserModule } from './current-user/current-user.module';\nimport { environment } from 'environments/environment';\nimport { localStorageSyncReducer } from '@store/local-storage.meta-reducer';\nimport { DefaultDataServiceConfig, EntityDataModule } from '@ngrx/data';\nimport { appEntityMetadata } from './entity-metadata';\nimport { SearchCriteriaStateModule } from './search/search-criteria/search-criteria-state.module';\n\nconst metaReducers: Array<MetaReducer<any, any>> = [localStorageSyncReducer];\n\nconst defaultDataServiceConfig: DefaultDataServiceConfig = {\n  root: `${environment.baseUrl}/api`,\n}\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forRoot({}, {\n      metaReducers,\n      runtimeChecks: {\n        //default value is true\n        strictStateImmutability: true,\n        strictActionImmutability: true,\n        //default value is false\n        strictStateSerializability: true,\n        strictActionSerializability: false,\n        strictActionWithinNgZone: true,\n        strictActionTypeUniqueness: true\n      }\n    }),\n    !environment.production ? StoreDevtoolsModule.instrument() : [],\n    EffectsModule.forRoot([]),\n    EntityDataModule.forRoot({\n      entityMetadata: appEntityMetadata,\n    }),\n    GlobalAppStatusStoreModule,\n    CurrentUserModule,\n    SearchCriteriaStateModule\n  ],\n  providers: [{ provide: DefaultDataServiceConfig, useValue: defaultDataServiceConfig }]\n})\nexport class RootStoreModule {\n}\n\n\n"})}),"\n",(0,a.jsx)(r.h3,{id:"app-state",children:"App State"}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.code,{children:"app.state.ts"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-TypeScript",children:'import { CurrentUser } from "@store/current-user/current-user.state";\nimport { GlobalAppStatus } from "@store/global-app-status";\nimport { CurrentAccount } from "@store/account/account.state";\nimport { SearchCriteriaState } from "./search/search-criteria/search-criteria.state";\n\n\nexport interface AppState {\n  globalAppStatus: GlobalAppStatus;\n  currentUser: CurrentUser;\n  currentAccount: CurrentAccount;\n  searchCriteria: SearchCriteriaState;\n}\n'})}),"\n",(0,a.jsx)(r.h3,{id:"persist-state",children:"Persist state"}),"\n",(0,a.jsxs)(r.p,{children:["Some of the states could be persisted into the ",(0,a.jsx)(r.code,{children:"local storage"})]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.code,{children:"local-storage.meta-reducer.ts"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-TypeScript",children:"import { ActionReducer } from '@ngrx/store';\nimport { localStorageSync } from 'ngrx-store-localstorage';\nimport { currentUserFeatureKey } from '@store/current-user/current-user.const';\n\nexport function localStorageSyncReducer(reducer: ActionReducer<any>): ActionReducer<any> {\n  return localStorageSync({\n    keys: [currentUserFeatureKey],\n    rehydrate: true,\n    removeOnUndefined: true\n  })(reducer);\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"metadata",children:"Metadata"}),"\n",(0,a.jsxs)(r.p,{children:["you my need the metadata. E.g. for ",(0,a.jsx)(r.code,{children:"ngrx/data"})," based on ",(0,a.jsx)(r.code,{children:"ngrx/entity"})," feature"]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.code,{children:"entity-metadata.ts"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-TypeScript",children:'\nimport { EntityMetadataMap } from "@ngrx/data";\nimport { AccountSummaryInfo } from "@pages/_models/account.model";\n\nexport const appEntityMetadata: EntityMetadataMap = {\n  Account: {\n    selectId: (accountSummaryInfo: AccountSummaryInfo) => accountSummaryInfo.accountId\n  },\n};\n'})}),"\n",(0,a.jsx)(r.p,{children:"and add it into the module:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{children:"export class SearchCriteriaModule {\n  constructor(myEntitiesService: EntityDefinitionService) {\n    myEntitiesService.registerMetadataMap(MyEntityMetadata);\n  }\n}\n"})}),"\n",(0,a.jsx)(r.p,{children:"And the service:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{children:"import { Injectable } from '@angular/core';\nimport { My } from '@app/shared/models/generic/my.model';\nimport {\n  EntityCollectionServiceBase,\n  EntityCollectionServiceElementsFactory\n} from '@ngrx/data';\n\n@Injectable({ providedIn: 'root' })\nexport class MyService extends EntityCollectionServiceBase<My> {\n  constructor(serviceElementsFactory: EntityCollectionServiceElementsFactory) {\n    super('My', serviceElementsFactory);\n  }\n}\n\n"})}),"\n",(0,a.jsx)(r.p,{children:"To create the state you will need the common state defenition and for\nevery state you will need some separate folder with a bunch of standard files:"}),"\n",(0,a.jsx)(r.h2,{id:"module",children:"Module"}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.code,{children:"search-criteria-state.module.ts"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-TypeScript",children:"\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {StoreModule} from '@ngrx/store';\nimport { reducer } from './search-criteria.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { SearchCriteriaEffects } from './search-criteria.effects';\nimport { searchCriteriaFeatureKey } from './search-criteria.const';\n\n\n\n@NgModule({\n    declarations: [],\n    imports: [\n      CommonModule,\n      StoreModule.forFeature(searchCriteriaFeatureKey, reducer),\n      EffectsModule.forFeature([SearchCriteriaEffects])\n    ]})\nexport class SearchCriteriaStateModule { }\n"})}),"\n",(0,a.jsx)(r.h2,{id:"consts-optionally",children:"Consts [Optionally]"}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.code,{children:"search-criteria.const.ts"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-TypeScript",children:"export const searchCriteriaFeatureKey = 'searchCriteria';\n\n"})}),"\n",(0,a.jsx)(r.h2,{id:"state-itself",children:"State itself"}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.code,{children:"search-criteria.state.ts"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-TypeScript",children:"\nimport { SearchCriteria } from \"@app/shared/models/search/search.model\";\n\n\nexport interface SearchCriteriaState {\n  readonly searchCriteria: SearchCriteria;\n}\n\nexport const initialSearchState: SearchCriteriaState = {\n  searchCriteria: { id: ''}\n};\n\n"})}),"\n",(0,a.jsx)(r.h2,{id:"actions",children:"Actions"}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.code,{children:"search-criteria.actions.ts"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-TypeScript",children:'import { SearchCriteria } from "@app/shared/models/search/search.model";\nimport { createAction } from "@ngrx/store";\nimport { props } from "@ngrx/store";\n\n\nexport const newSearch = createAction(\n  \'NewSearch\',\n  props<{searchCriteria: SearchCriteria}>()\n);\n\nexport const clearSearch = createAction(\n  \'ClearSearch\'\n);\n'})}),"\n",(0,a.jsx)(r.h2,{id:"reducer",children:"Reducer"}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.code,{children:"search-criteria.reducer.ts"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-TypeScript",children:"import { createReducer, on } from \"@ngrx/store\";\nimport { initialSearchState } from \"./search-criteria.state\";\nimport * as SearchActions from './search-criteria.actions';\n\n\nexport const reducer = createReducer(\n  initialSearchState,\n  on(SearchActions.newSearch, (state, searchCriteria) => {\n    return {\n      ...searchCriteria\n    }\n  }),\n  on(SearchActions.clearSearch, () => {\n    return {\n      searchCriteria: {id: ''}\n    }\n  })\n);\n\n"})}),"\n",(0,a.jsx)(r.h2,{id:"effects-optionally",children:"Effects [Optionally]"}),"\n",(0,a.jsx)(r.p,{children:"If you need to do some actions on state change you may define side effect\nhandlers."}),"\n",(0,a.jsx)(r.h3,{id:"basic-effect",children:"Basic effect"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-TypeScript",children:'import { Injectable } from "@angular/core";\nimport { Router } from "@angular/router";\nimport { Actions, createEffect, ofType } from "@ngrx/effects";\nimport { Action } from "@ngrx/store";\nimport { Store } from "@ngrx/store";\nimport { Observable, of } from "rxjs";\nimport { catchError, map, switchMap } from "rxjs/operators";\nimport { AppState } from "../app.state";\nimport * as SearchActions from \'./search.actions\';\nimport * as GlobalAppStatusActions from "@store/global-app-status/global-app-status.actions";\nimport { SearchService } from "@app/shared/services/search/search.service";\nimport { HttpErrorResponse } from "@angular/common/http";\n\n\n@Injectable()\nexport class SearchEffects {\n  constructor(\n    private actions$: Actions,\n    private store: Store<AppState>,\n    private router: Router,\n    private searchService: SearchService\n  ) { }\n\n\n  doSearch$: Observable<Action> = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(SearchActions.doSearch),\n      switchMap((action) => {\n        this.store.dispatch(GlobalAppStatusActions.makeBusy());\n        try {\n          return this.searchService.doSearch(action.searchCriteria)\n            .pipe(map(searchResult => SearchActions.searchResultsReady({ searchResult: searchResult })),\n                  catchError(err =>\n                    of(SearchActions.searchError({ errorMessage: err })))\n            )\n        } finally {\n          this.store.dispatch(GlobalAppStatusActions.makeReady());\n        }\n      })\n    );\n  })\n}\n\n'})}),"\n",(0,a.jsx)(r.h3,{id:"routing-effect-on-status-change",children:"Routing effect on status change"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-TypeScript",children:'import { Injectable } from "@angular/core";\nimport { Router } from "@angular/router";\nimport { Actions, createEffect, ofType } from "@ngrx/effects";\nimport { tap } from "rxjs/operators";\nimport * as SearchActions from \'./search-criteria.actions\';\n\n\n@Injectable()\nexport class SearchCriteriaEffects {\n  constructor(\n    private readonly actions$: Actions,\n    private readonly router: Router\n  ) { }\n\n\n  readonly newSearch$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SearchActions.newSearch),\n        tap(() => this.router.navigateByUrl(\'/search/results\'))\n    ),\n    { dispatch: false }\n  )\n}\n\n\n'})}),"\n",(0,a.jsx)(r.h3,{id:"using-service-and-promise",children:"Using service and promise."}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-TypeScript",children:"import { Injectable } from '@angular/core';\nimport { UserService } from '@app/shared/services/user.service';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { Action, Store } from '@ngrx/store';\nimport { pluck, switchMap } from 'rxjs/operators';\nimport * as CurrentUserActions from './current-user.actions';\nimport * as GlobalAppStatusActions from '@store/global-app-status/global-app-status.actions'\nimport { AppState } from '../app.state';\nimport { Router } from '@angular/router';\nimport * as CurrentAccountActions from \"@store/account/account.actions\";\n\n@Injectable()\nexport class CurrentUserEffects {\n  constructor(\n    private actions$: Actions,\n    private store: Store<AppState>,\n    private router: Router,\n    private userService: UserService\n  ) {}\n\n  getCurrentUser$: Observable<Action> = createEffect(() => {\n    console.log('getCurrentUser effect is called');\n    return this.actions$.pipe(\n      ofType(CurrentUserActions.getCurrentUser),\n      switchMap((action) => {\n        console.log(`In Effect creds: ${JSON.stringify(action)}`)\n        this.store.dispatch(GlobalAppStatusActions.makeBusy());\n        return this.userService\n          .login(action.userCredentials)\n          .toPromise()\n          .then((curUser) => {\n            setTimeout(() => this.router.navigate(['/dashboard']));\n            if(!curUser.superAdmin && curUser.accountId) {\n              this.store.dispatch(CurrentAccountActions.getCurrentAccount({accountId: curUser.accountId}));\n              return CurrentUserActions.getCurrentUserSuccess({ curUser: curUser });\n            }\n            return CurrentUserActions.getCurrentUserFailure({error: 'This site is not accessible for users that don\\'t have accountId in their user profile'});\n          })\n          .catch(error => {\n            console.log(`We get error: ${JSON.stringify(error)}`);\n\n            return CurrentUserActions.getCurrentUserFailure({error: error});\n          })\n          .finally(() => this.store.dispatch(GlobalAppStatusActions.makeReady()));\n      })\n    );\n  });\n}\n\n"})}),"\n",(0,a.jsxs)(r.p,{children:["Although using Promises is not recommended\nway. Prefer ",(0,a.jsx)(r.code,{children:"firstValueFrom"})," and ",(0,a.jsx)(r.code,{children:"lastValueFrom"})," operators:"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-TypeScript",children:"  public async loadCategories() {\n    const categories$ = this.inventoryService.getCategories();\n    this.categories = await lastValueFrom(categories$);\n  }\n\n"})}),"\n",(0,a.jsx)(r.h2,{id:"selectors-optionally",children:"Selectors [Optionally]"}),"\n",(0,a.jsx)(r.p,{children:"selectors might be very useful to reduce the boilerplate to access\neasily complicated parts of the state"}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.code,{children:"current-user.selector.ts"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-TypeScript",children:"import { createSelector } from '@ngrx/store';\nimport { AppState } from '../app.state';\n\nexport const selectCurrentUser = (state: AppState) => state.currentUser;\n\nexport const selectUserId = createSelector(\n  selectCurrentUser,\n  (userState) => userState.userId\n);\n\nexport const selectUserName = createSelector(\n  selectCurrentUser,\n  (userState) => userState.userName\n);\n\nexport const selectUserInitials = createSelector(\n  selectCurrentUser,\n  (userState) => `${createUserInitials(userState.firstName, userState.lastName)}`\n);\n\nexport const selectToken = createSelector(\n  selectCurrentUser,\n  (userState) => userState.token\n);\n\nexport const selectIsLoggedIn = createSelector(\n  selectCurrentUser,\n  (userState) => userState.token.length > 0\n);\n\nexport const selectHasLoginError = createSelector(\n  selectCurrentUser,\n  (userState) => userState.errorMessage.length > 0\n);\n\nexport const selectAuthError = createSelector(\n  selectCurrentUser,\n  (userState) => userState.errorMessage\n);\n\nexport const selectRoles = createSelector(\n  selectCurrentUser,\n  (userState) => userState.roles\n)\n\nexport const selectCurrentUserIsSuperAdmin = createSelector(\n  selectCurrentUser,\n  (userState) => userState.superAdmin\n)\n\nexport const selectFormFieldPermissions = createSelector(\n  selectCurrentUser,\n  (userState) => userState.formFieldPermissions\n)\n\nfunction createUserInitials(firstName: string, lastName: string): string {\n  return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();\n}\n\n\n"})}),"\n",(0,a.jsx)(r.h2,{id:"consume-the-state",children:"Consume the state"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-TypeScript",children:"\n  private destroy$: Subject<boolean> = new Subject<boolean>();\n\n\n  ngOnInit(): void {\n    this.store.select(selectCurrentUser)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(user => {\n        this.superAdmin = user.superAdmin;\n        this.availableRoleId = user.roleId;\n        this.availableRoles = user.roles;\n        this.updateView();\n      })\n  }\n  \n  ngOnDestroy() {\n    this.destroy$.next(true);\n    this.destroy$.unsubscribe();\n  }\n"})})]})}function p(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>c});var n=t(6540);const a={},s=n.createContext(a);function o(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);