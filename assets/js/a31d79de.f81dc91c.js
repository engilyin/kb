"use strict";(self.webpackChunkalex_ilin_kb=self.webpackChunkalex_ilin_kb||[]).push([[1645],{3165:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=t(4848),i=t(8453);const o={},l=".Net",s={id:"Development/Other/dotnet",title:".Net",description:".Net Core/6/7 Migration",source:"@site/docs/Development/Other/dotnet.md",sourceDirName:"Development/Other",slug:"/Development/Other/dotnet",permalink:"/kb/Development/Other/dotnet",draft:!1,unlisted:!1,editUrl:"https://github.com/engilyin/kb/docs/Development/Other/dotnet.md",tags:[],version:"current",lastUpdatedAt:1727544268e3,frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Kafka",permalink:"/kb/Development/Kafka/"},next:{title:"Groovy useful info",permalink:"/kb/Development/Other/groovy"}},a={},d=[{value:".Net Core/6/7 Migration",id:"net-core67-migration",level:2},{value:"General",id:"general",level:3},{value:"Visual Studio",id:"visual-studio",level:2},{value:"Issues",id:"issues",level:3},{value:"Unable to open the project",id:"unable-to-open-the-project",level:4},{value:"New <code>*.csproj</code> format:",id:"new-csproj-format",level:2},{value:"Migrate SOAP",id:"migrate-soap",level:2},{value:"Build from command line",id:"build-from-command-line",level:2},{value:"Migrating libs",id:"migrating-libs",level:2},{value:"Parllel processing",id:"parllel-processing",level:2},{value:"Log4net",id:"log4net",level:2},{value:"Build",id:"build",level:3},{value:"How to convert ASP.Net",id:"how-to-convert-aspnet",level:3},{value:"Logging",id:"logging",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"net",children:".Net"})}),"\n",(0,r.jsx)(n.h2,{id:"net-core67-migration",children:".Net Core/6/7 Migration"}),"\n",(0,r.jsx)(n.h3,{id:"general",children:"General"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Migrate to SDK 7"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The new csproj should be much simplier. Create a new project and than update its csproj acordingly"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use NuGet to reference the dependencies"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Native libs could not be easilly migrated. You need to find the replacement"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"EventLog is not supported on Linux and must be refactored (what is the best?)"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["remove legacy stuff from *.config file. E.g. ",(0,r.jsx)(n.code,{children:"<system.web>"})," ",(0,r.jsx)(n.code,{children:"<system.net>"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"visual-studio",children:"Visual Studio"}),"\n",(0,r.jsx)(n.h3,{id:"issues",children:"Issues"}),"\n",(0,r.jsx)(n.h4,{id:"unable-to-open-the-project",children:"Unable to open the project"}),"\n",(0,r.jsx)(n.p,{children:"If you try to right-click on the locked solution and add the existed project\nyou get the error that it can't find target SDK."}),"\n",(0,r.jsx)(n.p,{children:"Go to the env vars and make sure you have\nC:\\Program Files\\dotnet\non your PATH"}),"\n",(0,r.jsxs)(n.h2,{id:"new-csproj-format",children:["New ",(0,r.jsx)(n.code,{children:"*.csproj"})," format:"]}),"\n",(0,r.jsx)(n.p,{children:"You might need to update it manually and lots of stuff should go away. E.g. refs to files"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'\n<?xml version="1.0" encoding="utf-8"?>\n<Project Sdk="Microsoft.NET.Sdk">\n  <PropertyGroup>\n    <OutputType>Exe or Library</OutputType>\n    <TargetFramework>net7.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include="CoreWCF.Primitives" Version="1.3.2" />\n    <PackageReference Include="log4net" Version="2.0.15" />\n    <PackageReference Include="SharpZipLib" Version="1.4.2" />\n    <PackageReference Include="System.Data.SqlClient" Version="4.8.5" />\n\t<PackageReference Include="System.ServiceModel.Duplex" Version="6.0.0" />\n    <PackageReference Include="System.ServiceModel.Http" Version="6.0.0" />\n    <PackageReference Include="System.ServiceModel.NetTcp" Version="6.0.0" />\n    <PackageReference Include="System.ServiceModel.Security" Version="6.0.0" />\n    <PackageReference Include="System.ServiceModel.Federation" Version="6.0.0" />\n  </ItemGroup>\n\t<ItemGroup>\n\t  <ProjectReference Include="..\\Mcd ..yLib\\MyLib.csproj" />\n\t</ItemGroup>\n\n\t<ItemGroup>\n\t\t<Reference Include="MyLib">\n\t\t\t<HintPath>lib\\MyLib.dll</HintPath>\n\t\t</Reference>\n\t</ItemGroup>\n</Project>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"migrate-soap",children:"Migrate SOAP"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"Core WCF"})]}),"\n",(0,r.jsx)(n.p,{children:"we need to regenerate the stubs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:" dotnet tool install --global dotnet-svcutil\n \n dotnet-svcutil --roll-forward LatestMajor Web\\ References/SomeService/some-service.wsdl\n"})}),"\n",(0,r.jsx)(n.p,{children:"We need to rename and refactor the way how we connect to the SOAP service:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'    var binding = new BasicHttpBinding(BasicHttpSecurityMode.Transport);\n\tvar timeout = new TimeSpan(0, 0, int.Parse(System.Configuration.ConfigurationManager.AppSettings["MyService_Timeout"]));\n\n\tbinding.SendTimeout = timeout;\n\tbinding.OpenTimeout = timeout;\n\tbinding.ReceiveTimeout = timeout;\n\tbinding.CloseTimeout = timeout;\n\tbinding.MaxBufferSize = 20000000;\n\tbinding.MaxBufferPoolSize = 20000000;\n\tbinding.MaxReceivedMessageSize = 20000000;\n\n\tvar readerQuotas = new XmlDictionaryReaderQuotas();\n\treaderQuotas.MaxArrayLength = 20000000;\n\treaderQuotas.MaxStringContentLength = 20000000;\n\treaderQuotas.MaxDepth = 32;\n\tbinding.ReaderQuotas = readerQuotas;\n\n\n\tEndpointAddress endPointAddress = new EndpointAddress(System.Configuration.ConfigurationManager.AppSettings["MyService_URL"]);\n\n\tvar gpl = new MyServiceClient(binding, endPointAddress);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"build-from-command-line",children:"Build from command line"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'msbuild -maxCpuCount:1 "src/MyService/MyService.sln" -restore /p:OutputPath=C:\\Dev\\tmp\n'})}),"\n",(0,r.jsx)(n.h2,{id:"migrating-libs",children:"Migrating libs"}),"\n",(0,r.jsxs)(n.p,{children:["You need to replace ",(0,r.jsx)(n.code,{children:"System.Linq.Dynamic"})," with ",(0,r.jsx)(n.code,{children:"System.Linq.Dynamic.Core"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"using System.Linq.Dynamic;\nto\nusing System.Linq.Dynamic.Core;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"parllel-processing",children:"Parllel processing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace FunctionalDataProcessingExample\n{\n    class Program\n    {\n        private async Task<ArrayList> ProcessChunksAsync(MyServiceClient srv, List<Item> items, int chunkSize)\n        {\n            _logger.Info("Start quering service....");\n\n            var chunks = await Task.WhenAll(places.Select((item, index) => (Item: item, Index: index))\n                .GroupBy(pair => pair.Index / chunkSize)\n                .Select(async group =>\n                {\n \n                   var itemsSegment = group.Select(pair => pair.Item).ToArray();\n\n                   var result = await srv.ProcessingAsync(itemsSegment);\n\n          \n           \n                    return (group.Key * chunkSize, result);\n                }\n                ));\n\n            ArrayList allItems = new ArrayList(items.Count);\n            foreach (var (startIndex, chunckResult) in chunks)\n            {\n                var items = chunks.items;\n\n                if (items != null && items.Length > 0)\n                {\n                    allItems.InsertRange(allItems.Count, items);\n                }\n            }\n            return allItems;\n\n        }\n    }\n}\n\n\n'})}),"\n",(0,r.jsx)(n.h2,{id:"log4net",children:"Log4net"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://stackify.com/log4net-guide-dotnet-logging/",children:"https://stackify.com/log4net-guide-dotnet-logging/"})}),"\n",(0,r.jsxs)(n.p,{children:["To init add at the bottom of ",(0,r.jsx)(n.code,{children:"AssemblyInfo"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'[assembly: log4net.Config.XmlConfigurator(ConfigFile = "log4net.config")]\n'})}),"\n",(0,r.jsx)(n.p,{children:"if you put log4net config into the separate `log4net.config file."}),"\n",(0,r.jsxs)(n.p,{children:["Or if it is at the standard ",(0,r.jsx)(n.code,{children:"App.config"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[assembly: log4net.Config.XmlConfigurator()]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Sample settings:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'\n  <log4net>\n    <appender name="RollingFileAppender" type="log4net.Appender.RollingFileAppender">\n      <file value=".\\\\MY_LOG" />\n      <appendToFile value="true" />\n      <rollingStyle value="Date" />\n      <datePattern value="yyyyMMdd" />\n      <maxSizeRollBackups value="10" />\n      <layout type="log4net.Layout.PatternLayout">\n        <conversionPattern value="%date [%thread] %-5level %logger - %message%newline" />\n      </layout>\n    </appender>\n\t<appender name="console" type="log4net.Appender.ConsoleAppender">\n\t\t<layout type="log4net.Layout.PatternLayout">\n\t\t\t<conversionPattern value="%date %level %logger - %message%newline" />\n\t\t</layout>\n\t</appender>\n    <root>\n      <level value="ALL" />\n\t  <appender-ref ref="console" />\n\t  <appender-ref ref="RollingFileAppender" />\n    </root>\n  </log4net>\n</configuration>\n'})}),"\n",(0,r.jsx)(n.p,{children:"You can change the log file name on the fly:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'        protected void ConfigureLog4NetFile()\n        {\n            try\n            {\n                log4net.Repository.Hierarchy.Hierarchy root = log4net.LogManager.GetRepository() as log4net.Repository.Hierarchy.Hierarchy;\n                if (root != null)\n                {\n                    log4net.Appender.RollingFileAppender rfa = (log4net.Appender.RollingFileAppender)root.Root.GetAppender("RollingFileAppender");\n                    rfa.File = "MyNewLogFilename.log";\n                    if (rfa != null)\n                    {\n                        rfa.ActivateOptions();\n                    }\n                }\n            }\n            catch\n            {\n                Console.WriteLine("Error configuring Logging");\n            }\n        }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"build",children:"Build"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\n dotnet publish -r linux-x64\n \n dotnet publish -r win-x64\n  \n"})}),"\n",(0,r.jsx)(n.p,{children:"to build for linux you may use Docker image:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"docker pull mcr.microsoft.com/dotnet/sdk:7.0\n\ndocker run -it --rm mcr.microsoft.com/dotnet/sdk:7.0\n\ngit clone https://proj-url\n\n#enter the the project and checkout the right branch\n\ndotnet publish -r linux-x64 \n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"how-to-convert-aspnet",children:"How to convert ASP.Net"}),"\n",(0,r.jsx)(n.p,{children:"There is no auto conversion way."}),"\n",(0,r.jsx)(n.p,{children:"You basically have 2 options:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create new ASP.Net Core project and grew up new pages one by one"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Using the ",(0,r.jsx)(n.code,{children:"Razor"})," and the tool for conversion ",(0,r.jsx)(n.a,{href:"https://github.com/telerik/razor-converter",children:"https://github.com/telerik/razor-converter"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"logging",children:"Logging"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'  <log4net>\n    <appender name="RollingFileAppender" type="log4net.Appender.RollingFileAppender">\n      <file value=".\\\\log.txt" />\n      <appendToFile value="true" />\n      <rollingStyle value="Date" />\n      <datePattern value="yyyyMMdd" />\n      <maxSizeRollBackups value="10" />\n      <layout type="log4net.Layout.PatternLayout">\n        <conversionPattern value="%date [%thread] %-5level %logger - %message%newline" />\n      </layout>\n    </appender>\n\t<appender name="console" type="log4net.Appender.ConsoleAppender">\n\t\t<layout type="log4net.Layout.PatternLayout">\n\t\t\t<conversionPattern value="%date %level %logger - %message%newline" />\n\t\t</layout>\n\t</appender>\n    <root>\n      <level value="ALL" />\n\t  <appender-ref ref="console" />\n\t  <appender-ref ref="RollingFileAppender" />\n    </root>\n  </log4net>\n\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var r=t(6540);const i={},o=r.createContext(i);function l(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);