"use strict";(self.webpackChunkalex_ilin_kb=self.webpackChunkalex_ilin_kb||[]).push([[2068],{1469:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>a});var r=s(4848),l=s(8453);const i={},t=void 0,d={id:"Job/TechInterview/Java/related/sql",title:"sql",description:"SQL",source:"@site/docs/Job/TechInterview/Java/related/sql.md",sourceDirName:"Job/TechInterview/Java/related",slug:"/Job/TechInterview/Java/related/sql",permalink:"/kb/Job/TechInterview/Java/related/sql",draft:!1,unlisted:!1,editUrl:"https://github.com/engilyin/kb/docs/Job/TechInterview/Java/related/sql.md",tags:[],version:"current",lastUpdatedAt:1727972934e3,frontMatter:{},sidebar:"defaultSidebar",previous:{title:"common-coding-problems",permalink:"/kb/Job/TechInterview/Java/problem-solving/common-coding-problems"},next:{title:"unix",permalink:"/kb/Job/TechInterview/Java/related/unix"}},o={},a=[{value:"SQL",id:"sql",level:2},{value:"Resources",id:"resources",level:3},{value:"Joins",id:"joins",level:3},{value:"Keys",id:"keys",level:3},{value:"Indexes",id:"indexes",level:3},{value:"Queries",id:"queries",level:3},{value:"Frequently asked queries",id:"frequently-asked-queries",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"sql",children:"SQL"}),"\n",(0,r.jsx)(n.h3,{id:"resources",children:"Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"http://files.zeroturnaround.com/pdf/zt_sql_cheat_sheet.pdf",children:"Cheat sheet"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/sql/relational-databases/indexes/clustered-and-nonclustered-indexes-described",children:"Clustered vs Non-clustered indexes"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Database_index",children:"DB Index Wiki"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"joins",children:"Joins"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://commons.wikimedia.org/wiki/File:SQL_Joins.svg",children:"Pictorial Reference"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Inner join"}),": Rows common in both T1 and T2"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Left outer join"}),": All rows in T1"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Right outer join"}),": All rows in T2"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Full join"}),": All rows in T1 and T2"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cross join"}),": All rows in T1 * all rows in T2"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"keys",children:"Keys"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Primary key"}),": Uniquely identify the row. Cannot be null."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Candidate key"}),": Can be chosen as primary key"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Composite key"}),": Combination of multiple columns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Foreign key"}),": Column referencing other table's primary key"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"indexes",children:"Indexes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Improves speed of data retrieval."}),"\n",(0,r.jsx)(n.li,{children:"Primary and foreign keys are indexed by default."}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Non-clustered index"}),": Rows are unordered (stored in heap). While index is stored separately as sorted column."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clustered index"}),": The rows themselves are ordered (thus there can be only 1 clustered index per table)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Composite index"}),": Index on multiple columns (c1,c2,c3). Order of columns should match the where clauses for maximum efficiency."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cardinality"}),": Uniqueness of rows (eg: PassportID vs Gender column values)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Bitmap-index"}),": Used when cardinality is very low (eg: Gender column)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data structures used"}),": Bit arrays, hashmaps or B+Trees (most common)."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"queries",children:"Queries"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Union"}),": Merges content of 2 structurally compatible tables"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Group By"}),": Used to aggregate (avg, sum, count) values. Aggregate column should be same as group-by column."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Having"}),": Adding where clauses on top of group-by."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"frequently-asked-queries",children:"Frequently asked queries"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Find all departments with sales more than 1000"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:'SELECT department, SUM(sales) AS "Total sales"\nFROM order_details\t\nGROUP BY department\nHAVING SUM(sales) > 1000;\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Print all employee ids with their manager ids"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT e1.emp_id, e1.emp_mgr_id \nFROM employee e1 LEFT JOIN employee e2 \n   ON e1.emp_mgr_id = e2.emp_id\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Print all manager names with count of directs"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT e2.ename, count(e1.ename) \nFROM employee_s e1 LEFT OUTER JOIN employee_s e2 \n  ON e1.manager_id = e2.eid \ngroup by e2.ename;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Print 10th highest salary"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT Salary FROM\n(  SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT 10 ) \nAS Emp ORDER BY Salary LIMIT 1;\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>d});var r=s(6540);const l={},i=r.createContext(l);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);