"use strict";(self.webpackChunkalex_ilin_kb=self.webpackChunkalex_ilin_kb||[]).push([[868],{4348:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>o,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Job/TechInterview/Java/core/collections","title":"collections","description":"Collections","source":"@site/docs/Job/TechInterview/Java/core/collections.md","sourceDirName":"Job/TechInterview/Java/core","slug":"/Job/TechInterview/Java/core/collections","permalink":"/kb/Job/TechInterview/Java/core/collections","draft":false,"unlisted":false,"editUrl":"https://github.com/engilyin/kb/docs/Job/TechInterview/Java/core/collections.md","tags":[],"version":"current","lastUpdatedAt":1727972934000,"frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Java Tech Interview","permalink":"/kb/Job/TechInterview/Java/"},"next":{"title":"concurrency","permalink":"/kb/Job/TechInterview/Java/core/concurrency"}}');var l=i(4848),r=i(8453);const t={},a=void 0,d={},c=[{value:"Collections",id:"collections",level:2},{value:"Resources",id:"resources",level:3},{value:"Table of contents",id:"table-of-contents",level:3},{value:"Introduction",id:"introduction",level:3},{value:"Collection Implementations",id:"collection-implementations",level:3},{value:"Lists",id:"lists",level:3},{value:"ArrayList",id:"arraylist",level:4},{value:"LinkedList",id:"linkedlist",level:4},{value:"Stack",id:"stack",level:4},{value:"Vector",id:"vector",level:4},{value:"CopyOnWriteArrayList",id:"copyonwritearraylist",level:4},{value:"Collections.synchronizedList",id:"collectionssynchronizedlist",level:4},{value:"Sets",id:"sets",level:3},{value:"HashSet",id:"hashset",level:4},{value:"LinkedHashSet",id:"linkedhashset",level:4},{value:"TreeSet",id:"treeset",level:4},{value:"ConcurrentSkipListSet",id:"concurrentskiplistset",level:4},{value:"CopyOnWriteArraySet",id:"copyonwritearrayset",level:4},{value:"EnumSet",id:"enumset",level:4},{value:"Maps",id:"maps",level:3},{value:"HashMap",id:"hashmap",level:4},{value:"HashMap implementation details",id:"hashmap-implementation-details",level:4},{value:"LinkedHashMap",id:"linkedhashmap",level:4},{value:"Hashtable",id:"hashtable",level:4},{value:"ConcurrentHashMap",id:"concurrenthashmap",level:4},{value:"TreeMap",id:"treemap",level:4},{value:"ConcurrentSkipListMap",id:"concurrentskiplistmap",level:4},{value:"Queues",id:"queues",level:3},{value:"LinkedList",id:"linkedlist-1",level:4},{value:"ArrayBlockingQueue",id:"arrayblockingqueue",level:4},{value:"LinkedBlockingQueue",id:"linkedblockingqueue",level:4},{value:"ConcurrentLinkedQueue",id:"concurrentlinkedqueue",level:4},{value:"Deque classes",id:"deque-classes",level:4},{value:"PriorityQueue",id:"priorityqueue",level:4},{value:"PriorityBlockingQueue",id:"priorityblockingqueue",level:4},{value:"DelayQueue",id:"delayqueue",level:4},{value:"SynchronousQueue",id:"synchronousqueue",level:4},{value:"equals and hashCode",id:"equals-and-hashcode",level:3},{value:"Collections class",id:"collections-class",level:3},{value:"Utility methods",id:"utility-methods",level:4},{value:"Methods returning wrapped instances",id:"methods-returning-wrapped-instances",level:4},{value:"Hierarchy and classes",id:"hierarchy-and-classes",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"collections",children:"Collections"}),"\n",(0,l.jsx)(n.h3,{id:"resources",children:"Resources"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://www.amazon.com/Programmer-Study-1Z0-803-1Z0-804-Certification/dp/0071772006/ref=asap_bc?ie=UTF8",children:"OCA/OCP Java SE 7 Programmer"})," (book)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"http://files.zeroturnaround.com/pdf/zt_java_collections_cheat_sheet.pdf",children:"Cheat sheet"})," (PDF)"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"topics/design/effective-java.md",children:"Effective Java study notes"})}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"table-of-contents",children:"Table of contents"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#collections",children:"Collections"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#resources",children:"Resources"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#table-of-contents",children:"Table of contents"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#collection-implementations",children:"Collection Implementations"})}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#lists",children:"Lists"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#arraylist",children:"ArrayList"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#linkedlist",children:"LinkedList"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#stack",children:"Stack"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#vector",children:"Vector"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#copyonwritearraylist",children:"CopyOnWriteArrayList"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#collectionssynchronizedlist",children:"Collections.synchronizedList"})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#sets",children:"Sets"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#hashset",children:"HashSet"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#linkedhashset",children:"LinkedHashSet"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#treeset",children:"TreeSet"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#concurrentskiplistset",children:"ConcurrentSkipListSet"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#copyonwritearrayset",children:"CopyOnWriteArraySet"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#enumset",children:"EnumSet"})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#maps",children:"Maps"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#hashmap",children:"HashMap"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#hashmap-implementation-details",children:"HashMap implementation details"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#linkedhashmap",children:"LinkedHashMap"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#hashtable",children:"Hashtable"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#concurrenthashmap",children:"ConcurrentHashMap"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#treemap",children:"TreeMap"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#concurrentskiplistmap",children:"ConcurrentSkipListMap"})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#queues",children:"Queues"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#linkedlist-1",children:"LinkedList"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#arrayblockingqueue",children:"ArrayBlockingQueue"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#linkedblockingqueue",children:"LinkedBlockingQueue"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#concurrentlinkedqueue",children:"ConcurrentLinkedQueue"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#deque-classes",children:"Deque classes"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#priorityqueue",children:"PriorityQueue"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#priorityblockingqueue",children:"PriorityBlockingQueue"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#delayqueue",children:"DelayQueue"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#synchronousqueue",children:"SynchronousQueue"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#equals-and-hashcode",children:"equals and hashCode"})}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"#collections-class",children:"Collections class"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#utility-methods",children:"Utility methods"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#methods-returning-wrapped-instances",children:"Methods returning wrapped instances"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"#hierarchy-and-classes",children:"Hierarchy and classes"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,l.jsxs)(n.p,{children:["A ",(0,l.jsx)(n.em,{children:"collection"})," is an object that represents a group of objects (such as the classic ArrayList class).\nA ",(0,l.jsx)(n.em,{children:"collections"})," framework is a unified architecture for representing and manipulating collections, enabling collections to be manipulated independently of implementation details."]}),"\n",(0,l.jsx)(n.p,{children:"Advantages:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Reduces programming effort"}),"\n",(0,l.jsx)(n.li,{children:"Increases performance"}),"\n",(0,l.jsx)(n.li,{children:"Provides interoperability between unrelated APIs"}),"\n",(0,l.jsx)(n.li,{children:"Reduces the effort required to learn APIs"}),"\n",(0,l.jsx)(n.li,{children:"Reduces the effort required to design and implement APIs"}),"\n",(0,l.jsx)(n.li,{children:"Fosters software reuse"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"Collections Hierarchy",src:i(5316).A+"",width:"790",height:"547"})}),"\n",(0,l.jsx)(n.h3,{id:"collection-implementations",children:"Collection Implementations"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Interface"}),(0,l.jsx)(n.th,{children:"Hash Table"}),(0,l.jsx)(n.th,{children:"Resizable Array"}),(0,l.jsx)(n.th,{children:"Balanced Tree"}),(0,l.jsx)(n.th,{children:"Linked List"}),(0,l.jsx)(n.th,{children:"Hash Table + Linked List"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Set"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html",children:(0,l.jsx)(n.code,{children:"HashSet"})})}),(0,l.jsx)(n.td,{}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/TreeSet.html",children:(0,l.jsx)(n.code,{children:"TreeSet"})})}),(0,l.jsx)(n.td,{}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashSet.html",children:(0,l.jsx)(n.code,{children:"LinkedHashSet"})})})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"List"}),(0,l.jsx)(n.td,{}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html",children:(0,l.jsx)(n.code,{children:"ArrayList"})})}),(0,l.jsx)(n.td,{}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html",children:(0,l.jsx)(n.code,{children:"LinkedList"})})}),(0,l.jsx)(n.td,{})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Deque"}),(0,l.jsx)(n.td,{}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayDeque.html",children:(0,l.jsx)(n.code,{children:"ArrayDeque"})})}),(0,l.jsx)(n.td,{}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html",children:(0,l.jsx)(n.code,{children:"LinkedList"})})}),(0,l.jsx)(n.td,{})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Map"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashMap.html",children:(0,l.jsx)(n.code,{children:"HashMap"})})}),(0,l.jsx)(n.td,{}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/TreeMap.html",children:(0,l.jsx)(n.code,{children:"TreeMap"})})}),(0,l.jsx)(n.td,{}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.a,{href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedHashMap.html",children:(0,l.jsx)(n.code,{children:"LinkedHashMap"})})})]})]})]}),"\n",(0,l.jsx)(n.h3,{id:"lists",children:"Lists"}),"\n",(0,l.jsx)(n.h4,{id:"arraylist",children:"ArrayList"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Backed by array (which are co-located in memory), thus fast iteration and get(i) operation."}),"\n",(0,l.jsx)(n.li,{children:"Slow inserts when the backed array is full and has to double in size."}),"\n",(0,l.jsx)(n.li,{children:"Fail-fast iterators, which can throw ConcurrentModificationException."}),"\n",(0,l.jsx)(n.li,{children:"Add is O(n) - When element is added to middle of list, all elements on the right have to be moved."}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"http://stackoverflow.com/a/322742/3494368",children:"Use Case"})," - When iterations outnumber number of read/writes."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"linkedlist",children:"LinkedList"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Chain of nodes referencing each other (doubly linked list)."}),"\n",(0,l.jsx)(n.li,{children:"No co-location of nodes, pointers need to be chased for next element, thus slow iterations and get(i) operation."}),"\n",(0,l.jsx)(n.li,{children:"Fail-fast iterators, which can throw ConcurrentModificationException."}),"\n",(0,l.jsx)(n.li,{children:"Implements Queue interface, thus allows offer/pop/peek operations."}),"\n",(0,l.jsx)(n.li,{children:"Add is O(1) - Adding element in middle of list is just adjusting the node pointers."}),"\n",(0,l.jsx)(n.li,{children:"Internally uses references (~ to skiplist) to optimize iterations."}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"http://stackoverflow.com/a/322742/3494368",children:"Use Case"})," - Lot of inserts in middle of the list."]}),"\n"]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Operation"}),(0,l.jsx)(n.th,{children:"ArrayList"}),(0,l.jsx)(n.th,{children:"LinkedList"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"get(i)"}),(0,l.jsx)(n.td,{children:"O(1)"}),(0,l.jsx)(n.td,{children:"O(n)"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"add()"}),(0,l.jsx)(n.td,{children:"O(1) amortized"}),(0,l.jsx)(n.td,{children:"O(1)"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"remove(i)"}),(0,l.jsx)(n.td,{children:"O(n) Remove and move all elements"}),(0,l.jsx)(n.td,{children:"O(n) Iterate then remove"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"iterator.remove"}),(0,l.jsx)(n.td,{children:"O(n)"}),(0,l.jsx)(n.td,{children:"O(1)"})]})]})]}),"\n",(0,l.jsx)(n.h4,{id:"stack",children:"Stack"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"For stack operations push/pop/peek."}),"\n",(0,l.jsx)(n.li,{children:"Not used anymore. Recommended to use Deque implementations."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"vector",children:"Vector"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Synchronized version of list."}),"\n",(0,l.jsx)(n.li,{children:"Not used anymore. Recommended below mentioned alternatives."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"copyonwritearraylist",children:"CopyOnWriteArrayList"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Thread-safe."}),"\n",(0,l.jsx)(n.li,{children:"Backed array is copied during every element insert."}),"\n",(0,l.jsx)(n.li,{children:"Avoids ConcurrentModificationException since iteration can continue in original copy, and insert results in new copy."}),"\n",(0,l.jsx)(n.li,{children:"High memory usage (more pressure on GC) due to the resulting copies."}),"\n",(0,l.jsx)(n.li,{children:"Use case - Large number of threads for read, low number of writes."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"collectionssynchronizedlist",children:"Collections.synchronizedList"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Thread-safe."}),"\n",(0,l.jsx)(n.li,{children:"Can be slow due to mutual exclusion."}),"\n",(0,l.jsx)(n.li,{children:"Iterations have to be externally synchronized by developer"}),"\n",(0,l.jsx)(n.li,{children:"Can throw ConcurrentModificationException if (above mentioned) synchronization not done during iteration."}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"sets",children:"Sets"}),"\n",(0,l.jsx)(n.p,{children:"Collection of unique elements. No duplicates."}),"\n",(0,l.jsx)(n.h4,{id:"hashset",children:"HashSet"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Backed by HashMap."}),"\n",(0,l.jsx)(n.li,{children:"Performance can vary based on hashCode implementation."}),"\n",(0,l.jsx)(n.li,{children:"Constant time get/remove/add/contains (subject to above point)."}),"\n",(0,l.jsx)(n.li,{children:"Fail-fast iterators."}),"\n",(0,l.jsx)(n.li,{children:"Insertion order not retained."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"linkedhashset",children:"LinkedHashSet"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Insertion order is retained."}),"\n",(0,l.jsx)(n.li,{children:"Uses doubly-linked list to maintain the order."}),"\n",(0,l.jsx)(n.li,{children:"Iteration can be slower due to this."}),"\n",(0,l.jsx)(n.li,{children:"Other features, same as HashSet above (except iteration)"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"treeset",children:"TreeSet"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Elements sorted by their natural order (or Comparator passed in constructor)."}),"\n",(0,l.jsx)(n.li,{children:"Log(n) time for add/remove/contains operations."}),"\n",(0,l.jsx)(n.li,{children:"Navigable (floor, ceiling, higher, lower, headSet, tailSet operations)."}),"\n",(0,l.jsx)(n.li,{children:"Fail fast iterators."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"concurrentskiplistset",children:"ConcurrentSkipListSet"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Thread-safe."}),"\n",(0,l.jsx)(n.li,{children:"Log(n) time for add/remove/contains operations."}),"\n",(0,l.jsx)(n.li,{children:"Navigable (floor, ceiling, higher, lower, headSet, tailSet operations)."}),"\n",(0,l.jsx)(n.li,{children:"Size method is not constant time operation."}),"\n",(0,l.jsxs)(n.li,{children:["Weakly consistent iterators (do not throw ConcurrentModificationException but also ",(0,l.jsx)(n.strong,{children:"may not"})," reflect concurrently added items)."]}),"\n",(0,l.jsx)(n.li,{children:"Thus, bulk operations (addAll, removeAll, retainAll, containsAll etc) are not guaranteed to be atomic."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"copyonwritearrayset",children:"CopyOnWriteArraySet"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Backed by CopyOnWriteArrayList"}),"\n",(0,l.jsx)(n.li,{children:"Thread-safe."}),"\n",(0,l.jsx)(n.li,{children:"Slow. Operations have to iterate through the array for most operations."}),"\n",(0,l.jsx)(n.li,{children:"Recommended where reads vastly outnumber writes and set size is small."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"enumset",children:"EnumSet"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"To be used with Enum types."}),"\n",(0,l.jsx)(n.li,{children:"Very efficient and fast (backed by bit-vectors)."}),"\n",(0,l.jsx)(n.li,{children:"Weakly consistent iterators."}),"\n",(0,l.jsx)(n.li,{children:"Nulls not allowed."}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"maps",children:"Maps"}),"\n",(0,l.jsx)(n.h4,{id:"hashmap",children:"HashMap"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"key, value pairs."}),"\n",(0,l.jsx)(n.li,{children:"Permits a null key, and null values."}),"\n",(0,l.jsx)(n.li,{children:"Iteration order not guaranteed."}),"\n",(0,l.jsx)(n.li,{children:"Throws ConcurrentModificationException."}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"http://www.deepakvadgama.com/blog/java-hashmap-internals/",children:"Article detailing implementation"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"hashmap-implementation-details",children:"HashMap implementation details"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Backed by array (buckets), array-size is known as table-size."}),"\n",(0,l.jsx)(n.li,{children:"Position in array = element-hash % table-size."}),"\n",(0,l.jsx)(n.li,{children:"If elements end up in same bucket, they are added to linked-list (or a balanced red-black tree)."}),"\n",(0,l.jsx)(n.li,{children:"O(1) access (if hashcode properly distributes the values, else O(n) for linked-list & O(log(n)) for tree."}),"\n",(0,l.jsx)(n.li,{children:"Load factor - 0.75 default, decides when table-size should increase (double)."}),"\n",(0,l.jsx)(n.li,{children:"Bigger load-factor - more space-efficient, reduced speed (due to more elements in same bucket)."}),"\n",(0,l.jsx)(n.li,{children:"Lower load-factor - less space-efficient, more speed (less, ideally 1 element in 1 bucket)."}),"\n",(0,l.jsx)(n.li,{children:"Initial table-size = 16."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"linkedhashmap",children:"LinkedHashMap"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Insertion order is retained."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"hashtable",children:"Hashtable"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Thread-safe."}),"\n",(0,l.jsx)(n.li,{children:"Not used anymore, ConcurrentHashMap recommended."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"concurrenthashmap",children:"ConcurrentHashMap"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Thread-safe."}),"\n",(0,l.jsx)(n.li,{children:"Fine grained locking called striped locking (map is divided into segments, each with associated lock. Threads holding different locks don't conflict)."}),"\n",(0,l.jsx)(n.li,{children:"Improved performance over Hashtable."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"treemap",children:"TreeMap"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Sorted by keys."}),"\n",(0,l.jsx)(n.li,{children:"Uses Red-Black tree implementation."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"concurrentskiplistmap",children:"ConcurrentSkipListMap"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Thread-safe version of TreeMap."}),"\n",(0,l.jsx)(n.li,{children:"Navigable (floor, ceiling, higher, lower, headSet, tailSet operations)."}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"queues",children:"Queues"}),"\n",(0,l.jsx)(n.h4,{id:"linkedlist-1",children:"LinkedList"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Implements Queue interface."}),"\n",(0,l.jsx)(n.li,{children:"offer, peek, poll operations."}),"\n",(0,l.jsx)(n.li,{children:"Use case - task queues"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"arrayblockingqueue",children:"ArrayBlockingQueue"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Thread-safe."}),"\n",(0,l.jsx)(n.li,{children:"Backed by array. Thus bounded in size."}),"\n",(0,l.jsx)(n.li,{children:"Adding element to full queue results in blocking."}),"\n",(0,l.jsx)(n.li,{children:"Polling an empty queue results in blocking."}),"\n",(0,l.jsx)(n.li,{children:"Use case - Producer consumer problem."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"linkedblockingqueue",children:"LinkedBlockingQueue"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Thread-safe."}),"\n",(0,l.jsx)(n.li,{children:"Backed by linked-list."}),"\n",(0,l.jsx)(n.li,{children:"Optionally bounded in size. Takes maxSize as constructor argument."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"concurrentlinkedqueue",children:"ConcurrentLinkedQueue"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Thread-safe."}),"\n",(0,l.jsx)(n.li,{children:"Uses CAS (Compare-And-Swap) for more throughput. Also known as lock free."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"deque-classes",children:"Deque classes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"ArrayDeque - Double ended queue. Backed by array. Can throw ConcurrentModificationException."}),"\n",(0,l.jsx)(n.li,{children:"LinkedList - Implements Deque interface."}),"\n",(0,l.jsx)(n.li,{children:"LinkedBlockingDeque"}),"\n",(0,l.jsx)(n.li,{children:"ConcurrentLinkedDeque"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"priorityqueue",children:"PriorityQueue"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Elements sorted based on their natural order (or Comparator provided in Constructor)."}),"\n",(0,l.jsx)(n.li,{children:"Use case - task queues where tasks can have different priorities."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"priorityblockingqueue",children:"PriorityBlockingQueue"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Thread-safe."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"delayqueue",children:"DelayQueue"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Elements added, are available to be removed only after their delay-time is expired."}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"synchronousqueue",children:"SynchronousQueue"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Holds single elements."}),"\n",(0,l.jsx)(n.li,{children:"Blocks for both producer and consumer to arrive."}),"\n",(0,l.jsx)(n.li,{children:"Use case - For safe/atomic transfer of objects between threads."}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"equals-and-hashcode",children:"equals and hashCode"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"equals required for all collections."}),"\n",(0,l.jsx)(n.li,{children:"equals and hashCode required for Maps and Sets (which are backed by Maps)."}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"collections-class",children:"Collections class"}),"\n",(0,l.jsx)(n.h4,{id:"utility-methods",children:"Utility methods"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"sort(list, key) - guarantees stable sort"}),"\n",(0,l.jsx)(n.li,{children:"reverse"}),"\n",(0,l.jsx)(n.li,{children:"reverseOrder - returns Comparator for reversed order"}),"\n",(0,l.jsx)(n.li,{children:"shuffle"}),"\n",(0,l.jsx)(n.li,{children:"rotate(list, distance) - rotates elements by the distance specified"}),"\n",(0,l.jsxs)(n.li,{children:["binarySearch(list, key)","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"list should be sorted else can get unpredictable results"}),"\n",(0,l.jsx)(n.li,{children:"log(n) if list implements RandomAccess, else O(n)"}),"\n",(0,l.jsx)(n.li,{children:"RandomAccess - Marker interface that says, collection supports fast random access, get(i). Typically backed by arrays."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"methods-returning-wrapped-instances",children:"Methods returning wrapped instances"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"empty - emptyList, emptySet, emptyMap etc."}),"\n",(0,l.jsx)(n.li,{children:"synchronized - synchronizedList, synchronizedSet, synchronizedMap etc."}),"\n",(0,l.jsx)(n.li,{children:"unmodifiable - unmodifiableList, unmodifiableSet, unmodifiableMap etc."}),"\n",(0,l.jsx)(n.li,{children:"singleton(t) - singleton (returns set), singletonList, singletonMap etc."}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"hierarchy-and-classes",children:"Hierarchy and classes"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"collection-hierarchy-2",src:i(3537).A+"",width:"1026",height:"465"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"map-hierarchy-2",src:i(305).A+"",width:"1024",height:"460"})})]})}function o(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},5316:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Collections_Hierarchy-5bda8af9df8ee1a1f20436572c8efe35.svg"},3537:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/collection-hierarchy-2-7b32bdd96d7a83023fc99514af728a5a.png"},305:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/map-hierarchy-2-47181d3f9685d62d737c3fbc5d6507a8.png"},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var s=i(6540);const l={},r=s.createContext(l);function t(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);